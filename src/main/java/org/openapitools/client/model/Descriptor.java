/*
 * ONDC Protocol Core API
 * ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the description of a real-world object.
 */
@ApiModel(description = "Describes the description of a real-world object.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-21T15:31:26.696+05:30[Asia/Kolkata]")
public class Descriptor {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_SHORT_DESC = "short_desc";
  @SerializedName(SERIALIZED_NAME_SHORT_DESC)
  private String shortDesc;

  public static final String SERIALIZED_NAME_LONG_DESC = "long_desc";
  @SerializedName(SERIALIZED_NAME_LONG_DESC)
  private String longDesc;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<String> images = null;

  public static final String SERIALIZED_NAME_AUDIO = "audio";
  @SerializedName(SERIALIZED_NAME_AUDIO)
  private URI audio;

  public static final String SERIALIZED_NAME_3D_RENDER = "3d_render";
  @SerializedName(SERIALIZED_NAME_3D_RENDER)
  private URI _3dRender;

  public Descriptor() {
  }

  public Descriptor name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Descriptor code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public Descriptor symbol(String symbol) {
    
    this.symbol = symbol;
    return this;
  }

   /**
   * Get symbol
   * @return symbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSymbol() {
    return symbol;
  }


  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public Descriptor shortDesc(String shortDesc) {
    
    this.shortDesc = shortDesc;
    return this;
  }

   /**
   * Get shortDesc
   * @return shortDesc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getShortDesc() {
    return shortDesc;
  }


  public void setShortDesc(String shortDesc) {
    this.shortDesc = shortDesc;
  }


  public Descriptor longDesc(String longDesc) {
    
    this.longDesc = longDesc;
    return this;
  }

   /**
   * Get longDesc
   * @return longDesc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLongDesc() {
    return longDesc;
  }


  public void setLongDesc(String longDesc) {
    this.longDesc = longDesc;
  }


  public Descriptor images(List<String> images) {
    
    this.images = images;
    return this;
  }

  public Descriptor addImagesItem(String imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

   /**
   * Get images
   * @return images
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getImages() {
    return images;
  }


  public void setImages(List<String> images) {
    this.images = images;
  }


  public Descriptor audio(URI audio) {
    
    this.audio = audio;
    return this;
  }

   /**
   * Get audio
   * @return audio
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public URI getAudio() {
    return audio;
  }


  public void setAudio(URI audio) {
    this.audio = audio;
  }


  public Descriptor _3dRender(URI _3dRender) {
    
    this._3dRender = _3dRender;
    return this;
  }

   /**
   * Get _3dRender
   * @return _3dRender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public URI get3dRender() {
    return _3dRender;
  }


  public void set3dRender(URI _3dRender) {
    this._3dRender = _3dRender;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Descriptor descriptor = (Descriptor) o;
    return Objects.equals(this.name, descriptor.name) &&
        Objects.equals(this.code, descriptor.code) &&
        Objects.equals(this.symbol, descriptor.symbol) &&
        Objects.equals(this.shortDesc, descriptor.shortDesc) &&
        Objects.equals(this.longDesc, descriptor.longDesc) &&
        Objects.equals(this.images, descriptor.images) &&
        Objects.equals(this.audio, descriptor.audio) &&
        Objects.equals(this._3dRender, descriptor._3dRender);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, code, symbol, shortDesc, longDesc, images, audio, _3dRender);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Descriptor {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    shortDesc: ").append(toIndentedString(shortDesc)).append("\n");
    sb.append("    longDesc: ").append(toIndentedString(longDesc)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    audio: ").append(toIndentedString(audio)).append("\n");
    sb.append("    _3dRender: ").append(toIndentedString(_3dRender)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("code");
    openapiFields.add("symbol");
    openapiFields.add("short_desc");
    openapiFields.add("long_desc");
    openapiFields.add("images");
    openapiFields.add("audio");
    openapiFields.add("3d_render");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Descriptor
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Descriptor.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Descriptor is not found in the empty JSON string", Descriptor.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Descriptor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Descriptor` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if ((jsonObj.get("short_desc") != null && !jsonObj.get("short_desc").isJsonNull()) && !jsonObj.get("short_desc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_desc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_desc").toString()));
      }
      if ((jsonObj.get("long_desc") != null && !jsonObj.get("long_desc").isJsonNull()) && !jsonObj.get("long_desc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `long_desc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("long_desc").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) && !jsonObj.get("images").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
      }
      if ((jsonObj.get("audio") != null && !jsonObj.get("audio").isJsonNull()) && !jsonObj.get("audio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audio").toString()));
      }
      if ((jsonObj.get("3d_render") != null && !jsonObj.get("3d_render").isJsonNull()) && !jsonObj.get("3d_render").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `3d_render` to be a primitive type in the JSON string but got `%s`", jsonObj.get("3d_render").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Descriptor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Descriptor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Descriptor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Descriptor.class));

       return (TypeAdapter<T>) new TypeAdapter<Descriptor>() {
           @Override
           public void write(JsonWriter out, Descriptor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Descriptor read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Descriptor given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Descriptor
  * @throws IOException if the JSON string is invalid with respect to Descriptor
  */
  public static Descriptor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Descriptor.class);
  }

 /**
  * Convert an instance of Descriptor to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

