/*
 * ONDC Protocol Core API
 * ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.Descriptor;
import org.openapitools.client.model.Fulfillment;
import org.openapitools.client.model.Offer;
import org.openapitools.client.model.Payment;
import org.openapitools.client.model.Provider;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a Seller App catalog
 */
@ApiModel(description = "Describes a Seller App catalog")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-21T15:31:26.696+05:30[Asia/Kolkata]")
public class Catalog {
  public static final String SERIALIZED_NAME_BPP_DESCRIPTOR = "bpp/descriptor";
  @SerializedName(SERIALIZED_NAME_BPP_DESCRIPTOR)
  private Descriptor bppDescriptor;

  public static final String SERIALIZED_NAME_BPP_CATEGORIES = "bpp/categories";
  @SerializedName(SERIALIZED_NAME_BPP_CATEGORIES)
  private List<Category> bppCategories = null;

  public static final String SERIALIZED_NAME_BPP_FULFILLMENTS = "bpp/fulfillments";
  @SerializedName(SERIALIZED_NAME_BPP_FULFILLMENTS)
  private List<Fulfillment> bppFulfillments = null;

  public static final String SERIALIZED_NAME_BPP_PAYMENTS = "bpp/payments";
  @SerializedName(SERIALIZED_NAME_BPP_PAYMENTS)
  private List<Payment> bppPayments = null;

  public static final String SERIALIZED_NAME_BPP_OFFERS = "bpp/offers";
  @SerializedName(SERIALIZED_NAME_BPP_OFFERS)
  private List<Offer> bppOffers = null;

  public static final String SERIALIZED_NAME_BPP_PROVIDERS = "bpp/providers";
  @SerializedName(SERIALIZED_NAME_BPP_PROVIDERS)
  private List<Provider> bppProviders = null;

  public static final String SERIALIZED_NAME_EXP = "exp";
  @SerializedName(SERIALIZED_NAME_EXP)
  private OffsetDateTime exp;

  public Catalog() {
  }

  public Catalog bppDescriptor(Descriptor bppDescriptor) {
    
    this.bppDescriptor = bppDescriptor;
    return this;
  }

   /**
   * Get bppDescriptor
   * @return bppDescriptor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Descriptor getBppDescriptor() {
    return bppDescriptor;
  }


  public void setBppDescriptor(Descriptor bppDescriptor) {
    this.bppDescriptor = bppDescriptor;
  }


  public Catalog bppCategories(List<Category> bppCategories) {
    
    this.bppCategories = bppCategories;
    return this;
  }

  public Catalog addBppCategoriesItem(Category bppCategoriesItem) {
    if (this.bppCategories == null) {
      this.bppCategories = new ArrayList<>();
    }
    this.bppCategories.add(bppCategoriesItem);
    return this;
  }

   /**
   * Get bppCategories
   * @return bppCategories
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Category> getBppCategories() {
    return bppCategories;
  }


  public void setBppCategories(List<Category> bppCategories) {
    this.bppCategories = bppCategories;
  }


  public Catalog bppFulfillments(List<Fulfillment> bppFulfillments) {
    
    this.bppFulfillments = bppFulfillments;
    return this;
  }

  public Catalog addBppFulfillmentsItem(Fulfillment bppFulfillmentsItem) {
    if (this.bppFulfillments == null) {
      this.bppFulfillments = new ArrayList<>();
    }
    this.bppFulfillments.add(bppFulfillmentsItem);
    return this;
  }

   /**
   * Get bppFulfillments
   * @return bppFulfillments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Fulfillment> getBppFulfillments() {
    return bppFulfillments;
  }


  public void setBppFulfillments(List<Fulfillment> bppFulfillments) {
    this.bppFulfillments = bppFulfillments;
  }


  public Catalog bppPayments(List<Payment> bppPayments) {
    
    this.bppPayments = bppPayments;
    return this;
  }

  public Catalog addBppPaymentsItem(Payment bppPaymentsItem) {
    if (this.bppPayments == null) {
      this.bppPayments = new ArrayList<>();
    }
    this.bppPayments.add(bppPaymentsItem);
    return this;
  }

   /**
   * Get bppPayments
   * @return bppPayments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Payment> getBppPayments() {
    return bppPayments;
  }


  public void setBppPayments(List<Payment> bppPayments) {
    this.bppPayments = bppPayments;
  }


  public Catalog bppOffers(List<Offer> bppOffers) {
    
    this.bppOffers = bppOffers;
    return this;
  }

  public Catalog addBppOffersItem(Offer bppOffersItem) {
    if (this.bppOffers == null) {
      this.bppOffers = new ArrayList<>();
    }
    this.bppOffers.add(bppOffersItem);
    return this;
  }

   /**
   * Get bppOffers
   * @return bppOffers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Offer> getBppOffers() {
    return bppOffers;
  }


  public void setBppOffers(List<Offer> bppOffers) {
    this.bppOffers = bppOffers;
  }


  public Catalog bppProviders(List<Provider> bppProviders) {
    
    this.bppProviders = bppProviders;
    return this;
  }

  public Catalog addBppProvidersItem(Provider bppProvidersItem) {
    if (this.bppProviders == null) {
      this.bppProviders = new ArrayList<>();
    }
    this.bppProviders.add(bppProvidersItem);
    return this;
  }

   /**
   * Get bppProviders
   * @return bppProviders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Provider> getBppProviders() {
    return bppProviders;
  }


  public void setBppProviders(List<Provider> bppProviders) {
    this.bppProviders = bppProviders;
  }


  public Catalog exp(OffsetDateTime exp) {
    
    this.exp = exp;
    return this;
  }

   /**
   * Time after which catalog has to be refreshed
   * @return exp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Time after which catalog has to be refreshed")

  public OffsetDateTime getExp() {
    return exp;
  }


  public void setExp(OffsetDateTime exp) {
    this.exp = exp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Catalog catalog = (Catalog) o;
    return Objects.equals(this.bppDescriptor, catalog.bppDescriptor) &&
        Objects.equals(this.bppCategories, catalog.bppCategories) &&
        Objects.equals(this.bppFulfillments, catalog.bppFulfillments) &&
        Objects.equals(this.bppPayments, catalog.bppPayments) &&
        Objects.equals(this.bppOffers, catalog.bppOffers) &&
        Objects.equals(this.bppProviders, catalog.bppProviders) &&
        Objects.equals(this.exp, catalog.exp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bppDescriptor, bppCategories, bppFulfillments, bppPayments, bppOffers, bppProviders, exp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Catalog {\n");
    sb.append("    bppDescriptor: ").append(toIndentedString(bppDescriptor)).append("\n");
    sb.append("    bppCategories: ").append(toIndentedString(bppCategories)).append("\n");
    sb.append("    bppFulfillments: ").append(toIndentedString(bppFulfillments)).append("\n");
    sb.append("    bppPayments: ").append(toIndentedString(bppPayments)).append("\n");
    sb.append("    bppOffers: ").append(toIndentedString(bppOffers)).append("\n");
    sb.append("    bppProviders: ").append(toIndentedString(bppProviders)).append("\n");
    sb.append("    exp: ").append(toIndentedString(exp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bpp/descriptor");
    openapiFields.add("bpp/categories");
    openapiFields.add("bpp/fulfillments");
    openapiFields.add("bpp/payments");
    openapiFields.add("bpp/offers");
    openapiFields.add("bpp/providers");
    openapiFields.add("exp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Catalog
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Catalog.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Catalog is not found in the empty JSON string", Catalog.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Catalog.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Catalog` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `bpp/descriptor`
      if (jsonObj.get("bpp/descriptor") != null && !jsonObj.get("bpp/descriptor").isJsonNull()) {
        Descriptor.validateJsonObject(jsonObj.getAsJsonObject("bpp/descriptor"));
      }
      JsonArray jsonArraybppCategories = jsonObj.getAsJsonArray("bpp/categories");
      if (jsonArraybppCategories != null) {
        // ensure the json data is an array
        if (!jsonObj.get("bpp/categories").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `bpp/categories` to be an array in the JSON string but got `%s`", jsonObj.get("bpp/categories").toString()));
        }

        // validate the optional field `bpp/categories` (array)
        for (int i = 0; i < jsonArraybppCategories.size(); i++) {
          Category.validateJsonObject(jsonArraybppCategories.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraybppFulfillments = jsonObj.getAsJsonArray("bpp/fulfillments");
      if (jsonArraybppFulfillments != null) {
        // ensure the json data is an array
        if (!jsonObj.get("bpp/fulfillments").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `bpp/fulfillments` to be an array in the JSON string but got `%s`", jsonObj.get("bpp/fulfillments").toString()));
        }

        // validate the optional field `bpp/fulfillments` (array)
        for (int i = 0; i < jsonArraybppFulfillments.size(); i++) {
          Fulfillment.validateJsonObject(jsonArraybppFulfillments.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraybppPayments = jsonObj.getAsJsonArray("bpp/payments");
      if (jsonArraybppPayments != null) {
        // ensure the json data is an array
        if (!jsonObj.get("bpp/payments").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `bpp/payments` to be an array in the JSON string but got `%s`", jsonObj.get("bpp/payments").toString()));
        }

        // validate the optional field `bpp/payments` (array)
        for (int i = 0; i < jsonArraybppPayments.size(); i++) {
          Payment.validateJsonObject(jsonArraybppPayments.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraybppOffers = jsonObj.getAsJsonArray("bpp/offers");
      if (jsonArraybppOffers != null) {
        // ensure the json data is an array
        if (!jsonObj.get("bpp/offers").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `bpp/offers` to be an array in the JSON string but got `%s`", jsonObj.get("bpp/offers").toString()));
        }

        // validate the optional field `bpp/offers` (array)
        for (int i = 0; i < jsonArraybppOffers.size(); i++) {
          Offer.validateJsonObject(jsonArraybppOffers.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraybppProviders = jsonObj.getAsJsonArray("bpp/providers");
      if (jsonArraybppProviders != null) {
        // ensure the json data is an array
        if (!jsonObj.get("bpp/providers").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `bpp/providers` to be an array in the JSON string but got `%s`", jsonObj.get("bpp/providers").toString()));
        }

        // validate the optional field `bpp/providers` (array)
        for (int i = 0; i < jsonArraybppProviders.size(); i++) {
          Provider.validateJsonObject(jsonArraybppProviders.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Catalog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Catalog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Catalog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Catalog.class));

       return (TypeAdapter<T>) new TypeAdapter<Catalog>() {
           @Override
           public void write(JsonWriter out, Catalog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Catalog read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Catalog given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Catalog
  * @throws IOException if the JSON string is invalid with respect to Catalog
  */
  public static Catalog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Catalog.class);
  }

 /**
  * Convert an instance of Catalog to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

