/*
 * ONDC Protocol Core API
 * ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Code;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Any entity which wants to authenticate itself on a network. This can be a Buyer App, Seller App or Gateway.
 */
@ApiModel(description = "Any entity which wants to authenticate itself on a network. This can be a Buyer App, Seller App or Gateway.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-21T15:31:26.696+05:30[Asia/Kolkata]")
public class Subscriber {
  public static final String SERIALIZED_NAME_SUBSCRIBER_ID = "subscriber_id";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBER_ID)
  private String subscriberId;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    BAP("bap"),
    
    BPP("bpp"),
    
    BG("bg");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_CB_URL = "cb_url";
  @SerializedName(SERIALIZED_NAME_CB_URL)
  private String cbUrl;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private Code city = null;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private Code country = null;

  public static final String SERIALIZED_NAME_SIGNING_PUBLIC_KEY = "signing_public_key";
  @SerializedName(SERIALIZED_NAME_SIGNING_PUBLIC_KEY)
  private String signingPublicKey;

  public static final String SERIALIZED_NAME_ENCRYPTION_PUBLIC_KEY = "encryption_public_key";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_PUBLIC_KEY)
  private String encryptionPublicKey;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    INITIATED("INITIATED"),
    
    UNDER_SUBSCRIPTION("UNDER_SUBSCRIPTION"),
    
    SUBSCRIBED("SUBSCRIBED"),
    
    INVALID_SSL("INVALID_SSL"),
    
    UNSUBSCRIBED("UNSUBSCRIBED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_EXPIRES = "expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private OffsetDateTime expires;

  public Subscriber() {
  }

  public Subscriber subscriberId(String subscriberId) {
    
    this.subscriberId = subscriberId;
    return this;
  }

   /**
   * Registered domain name of the subscriber. Must have a valid SSL certificate issued by a Certificate Authority of the operating region
   * @return subscriberId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Registered domain name of the subscriber. Must have a valid SSL certificate issued by a Certificate Authority of the operating region")

  public String getSubscriberId() {
    return subscriberId;
  }


  public void setSubscriberId(String subscriberId) {
    this.subscriberId = subscriberId;
  }


  public Subscriber type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Subscriber cbUrl(String cbUrl) {
    
    this.cbUrl = cbUrl;
    return this;
  }

   /**
   * Callback URL of the subscriber. The Registry will call this URL&#39;s on_subscribe API to validate the subscriber\\&#39;s credentials
   * @return cbUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Callback URL of the subscriber. The Registry will call this URL's on_subscribe API to validate the subscriber\\'s credentials")

  public String getCbUrl() {
    return cbUrl;
  }


  public void setCbUrl(String cbUrl) {
    this.cbUrl = cbUrl;
  }


  public Subscriber domain(String domain) {
    
    this.domain = domain;
    return this;
  }

   /**
   * Codification of domains supported by ONDC
   * @return domain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Codification of domains supported by ONDC")

  public String getDomain() {
    return domain;
  }


  public void setDomain(String domain) {
    this.domain = domain;
  }


  public Subscriber city(Code city) {
    
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Code getCity() {
    return city;
  }


  public void setCity(Code city) {
    this.city = city;
  }


  public Subscriber country(Code country) {
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Code getCountry() {
    return country;
  }


  public void setCountry(Code country) {
    this.country = country;
  }


  public Subscriber signingPublicKey(String signingPublicKey) {
    
    this.signingPublicKey = signingPublicKey;
    return this;
  }

   /**
   * Signing Public key of the subscriber. &lt;br/&gt;&lt;br/&gt;Any subscriber platform (Buyer App, Seller App, Gateway) who wants to transact on the network must digitally sign the &#x60;&#x60;&#x60;requestBody&#x60;&#x60;&#x60; using the corresponding private key of this public key and send it in the transport layer header. In case of &#x60;&#x60;&#x60;HTTP&#x60;&#x60;&#x60; it is the &#x60;&#x60;&#x60;Authorization&#x60;&#x60;&#x60; header. &lt;br&gt;&lt;br/&gt;The &#x60;&#x60;&#x60;Authorization&#x60;&#x60;&#x60; will be used to validate the signature of a Buyer App or Seller App.&lt;br/&gt;&lt;br/&gt;Furthermore, if an API call is being proxied or multicast by a ONDC Gateway, the Gateway must use it\\&#39;s signing key to digitally sign the &#x60;&#x60;&#x60;requestBody&#x60;&#x60;&#x60; using the corresponding private key of this public key and send it in the &#x60;&#x60;&#x60;X-Gateway-Authorization&#x60;&#x60;&#x60; header.
   * @return signingPublicKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Signing Public key of the subscriber. <br/><br/>Any subscriber platform (Buyer App, Seller App, Gateway) who wants to transact on the network must digitally sign the ```requestBody``` using the corresponding private key of this public key and send it in the transport layer header. In case of ```HTTP``` it is the ```Authorization``` header. <br><br/>The ```Authorization``` will be used to validate the signature of a Buyer App or Seller App.<br/><br/>Furthermore, if an API call is being proxied or multicast by a ONDC Gateway, the Gateway must use it\\'s signing key to digitally sign the ```requestBody``` using the corresponding private key of this public key and send it in the ```X-Gateway-Authorization``` header.")

  public String getSigningPublicKey() {
    return signingPublicKey;
  }


  public void setSigningPublicKey(String signingPublicKey) {
    this.signingPublicKey = signingPublicKey;
  }


  public Subscriber encryptionPublicKey(String encryptionPublicKey) {
    
    this.encryptionPublicKey = encryptionPublicKey;
    return this;
  }

   /**
   * Encryption public key of the Buyer App. Any Seller App must encrypt the &#x60;&#x60;&#x60;requestBody.message&#x60;&#x60;&#x60; value of the &#x60;&#x60;&#x60;on_search&#x60;&#x60;&#x60; API using this public key.
   * @return encryptionPublicKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Encryption public key of the Buyer App. Any Seller App must encrypt the ```requestBody.message``` value of the ```on_search``` API using this public key.")

  public String getEncryptionPublicKey() {
    return encryptionPublicKey;
  }


  public void setEncryptionPublicKey(String encryptionPublicKey) {
    this.encryptionPublicKey = encryptionPublicKey;
  }


  public Subscriber status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Subscriber created(OffsetDateTime created) {
    
    this.created = created;
    return this;
  }

   /**
   * Timestamp when a subscriber was added to the registry with status &#x3D; INITIATED
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Timestamp when a subscriber was added to the registry with status = INITIATED")

  public OffsetDateTime getCreated() {
    return created;
  }


  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public Subscriber updated(OffsetDateTime updated) {
    
    this.updated = updated;
    return this;
  }

   /**
   * Get updated
   * @return updated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getUpdated() {
    return updated;
  }


  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }


  public Subscriber expires(OffsetDateTime expires) {
    
    this.expires = expires;
    return this;
  }

   /**
   * Expiry timestamp in UTC derived from the &#x60;&#x60;&#x60;lease_time&#x60;&#x60;&#x60; of the subscriber
   * @return expires
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Expiry timestamp in UTC derived from the ```lease_time``` of the subscriber")

  public OffsetDateTime getExpires() {
    return expires;
  }


  public void setExpires(OffsetDateTime expires) {
    this.expires = expires;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Subscriber subscriber = (Subscriber) o;
    return Objects.equals(this.subscriberId, subscriber.subscriberId) &&
        Objects.equals(this.type, subscriber.type) &&
        Objects.equals(this.cbUrl, subscriber.cbUrl) &&
        Objects.equals(this.domain, subscriber.domain) &&
        Objects.equals(this.city, subscriber.city) &&
        Objects.equals(this.country, subscriber.country) &&
        Objects.equals(this.signingPublicKey, subscriber.signingPublicKey) &&
        Objects.equals(this.encryptionPublicKey, subscriber.encryptionPublicKey) &&
        Objects.equals(this.status, subscriber.status) &&
        Objects.equals(this.created, subscriber.created) &&
        Objects.equals(this.updated, subscriber.updated) &&
        Objects.equals(this.expires, subscriber.expires);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subscriberId, type, cbUrl, domain, city, country, signingPublicKey, encryptionPublicKey, status, created, updated, expires);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Subscriber {\n");
    sb.append("    subscriberId: ").append(toIndentedString(subscriberId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    cbUrl: ").append(toIndentedString(cbUrl)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    signingPublicKey: ").append(toIndentedString(signingPublicKey)).append("\n");
    sb.append("    encryptionPublicKey: ").append(toIndentedString(encryptionPublicKey)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("subscriber_id");
    openapiFields.add("type");
    openapiFields.add("cb_url");
    openapiFields.add("domain");
    openapiFields.add("city");
    openapiFields.add("country");
    openapiFields.add("signing_public_key");
    openapiFields.add("encryption_public_key");
    openapiFields.add("status");
    openapiFields.add("created");
    openapiFields.add("updated");
    openapiFields.add("expires");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Subscriber
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Subscriber.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Subscriber is not found in the empty JSON string", Subscriber.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Subscriber.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Subscriber` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("subscriber_id") != null && !jsonObj.get("subscriber_id").isJsonNull()) && !jsonObj.get("subscriber_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriber_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriber_id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("cb_url") != null && !jsonObj.get("cb_url").isJsonNull()) && !jsonObj.get("cb_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cb_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cb_url").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("signing_public_key") != null && !jsonObj.get("signing_public_key").isJsonNull()) && !jsonObj.get("signing_public_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signing_public_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signing_public_key").toString()));
      }
      if ((jsonObj.get("encryption_public_key") != null && !jsonObj.get("encryption_public_key").isJsonNull()) && !jsonObj.get("encryption_public_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryption_public_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryption_public_key").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Subscriber.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Subscriber' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Subscriber> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Subscriber.class));

       return (TypeAdapter<T>) new TypeAdapter<Subscriber>() {
           @Override
           public void write(JsonWriter out, Subscriber value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Subscriber read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Subscriber given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Subscriber
  * @throws IOException if the JSON string is invalid with respect to Subscriber
  */
  public static Subscriber fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Subscriber.class);
  }

 /**
  * Convert an instance of Subscriber to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

