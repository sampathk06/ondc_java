/*
 * ONDC Protocol Core API
 * ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Code;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a ONDC message context
 */
@ApiModel(description = "Describes a ONDC message context")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-21T15:31:26.696+05:30[Asia/Kolkata]")
public class Context {
  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private Code country = null;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private Code city = null;

  /**
   * Defines the ONDC API call. Any actions other than the enumerated actions are not supported by ONDC Protocol
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    SEARCH("search"),
    
    SELECT("select"),
    
    INIT("init"),
    
    CONFIRM("confirm"),
    
    UPDATE("update"),
    
    STATUS("status"),
    
    TRACK("track"),
    
    CANCEL("cancel"),
    
    RATING("rating"),
    
    SUPPORT("support"),
    
    ON_SEARCH("on_search"),
    
    ON_SELECT("on_select"),
    
    ON_INIT("on_init"),
    
    ON_CONFIRM("on_confirm"),
    
    ON_UPDATE("on_update"),
    
    ON_STATUS("on_status"),
    
    ON_TRACK("on_track"),
    
    ON_CANCEL("on_cancel"),
    
    ON_RATING("on_rating"),
    
    ON_SUPPORT("on_support");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  public static final String SERIALIZED_NAME_CORE_VERSION = "core_version";
  @SerializedName(SERIALIZED_NAME_CORE_VERSION)
  private String coreVersion;

  public static final String SERIALIZED_NAME_BAP_ID = "bap_id";
  @SerializedName(SERIALIZED_NAME_BAP_ID)
  private String bapId;

  public static final String SERIALIZED_NAME_BAP_URI = "bap_uri";
  @SerializedName(SERIALIZED_NAME_BAP_URI)
  private URI bapUri;

  public static final String SERIALIZED_NAME_BPP_ID = "bpp_id";
  @SerializedName(SERIALIZED_NAME_BPP_ID)
  private String bppId;

  public static final String SERIALIZED_NAME_BPP_URI = "bpp_uri";
  @SerializedName(SERIALIZED_NAME_BPP_URI)
  private URI bppUri;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transaction_id";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "message_id";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private String messageId;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private String ttl;

  public Context() {
  }

  public Context domain(String domain) {
    
    this.domain = domain;
    return this;
  }

   /**
   * Codification of domains supported by ONDC
   * @return domain
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Codification of domains supported by ONDC")

  public String getDomain() {
    return domain;
  }


  public void setDomain(String domain) {
    this.domain = domain;
  }


  public Context country(Code country) {
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Code getCountry() {
    return country;
  }


  public void setCountry(Code country) {
    this.country = country;
  }


  public Context city(Code city) {
    
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Code getCity() {
    return city;
  }


  public void setCity(Code city) {
    this.city = city;
  }


  public Context action(ActionEnum action) {
    
    this.action = action;
    return this;
  }

   /**
   * Defines the ONDC API call. Any actions other than the enumerated actions are not supported by ONDC Protocol
   * @return action
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Defines the ONDC API call. Any actions other than the enumerated actions are not supported by ONDC Protocol")

  public ActionEnum getAction() {
    return action;
  }


  public void setAction(ActionEnum action) {
    this.action = action;
  }


  public Context coreVersion(String coreVersion) {
    
    this.coreVersion = coreVersion;
    return this;
  }

   /**
   * Version of ONDC core API specification being used
   * @return coreVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Version of ONDC core API specification being used")

  public String getCoreVersion() {
    return coreVersion;
  }


  public void setCoreVersion(String coreVersion) {
    this.coreVersion = coreVersion;
  }


  public Context bapId(String bapId) {
    
    this.bapId = bapId;
    return this;
  }

   /**
   * Unique id of the Buyer App. By default it is the fully qualified domain name of the Buyer App
   * @return bapId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Unique id of the Buyer App. By default it is the fully qualified domain name of the Buyer App")

  public String getBapId() {
    return bapId;
  }


  public void setBapId(String bapId) {
    this.bapId = bapId;
  }


  public Context bapUri(URI bapUri) {
    
    this.bapUri = bapUri;
    return this;
  }

   /**
   * URI of the Seller App for accepting callbacks. Must have the same domain name as the bap_id
   * @return bapUri
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "URI of the Seller App for accepting callbacks. Must have the same domain name as the bap_id")

  public URI getBapUri() {
    return bapUri;
  }


  public void setBapUri(URI bapUri) {
    this.bapUri = bapUri;
  }


  public Context bppId(String bppId) {
    
    this.bppId = bppId;
    return this;
  }

   /**
   * Unique id of the Seller App. By default it is the fully qualified domain name of the Seller App
   * @return bppId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique id of the Seller App. By default it is the fully qualified domain name of the Seller App")

  public String getBppId() {
    return bppId;
  }


  public void setBppId(String bppId) {
    this.bppId = bppId;
  }


  public Context bppUri(URI bppUri) {
    
    this.bppUri = bppUri;
    return this;
  }

   /**
   * URI of the Seller App. Must have the same domain name as the bap_id
   * @return bppUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URI of the Seller App. Must have the same domain name as the bap_id")

  public URI getBppUri() {
    return bppUri;
  }


  public void setBppUri(URI bppUri) {
    this.bppUri = bppUri;
  }


  public Context transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * This is a unique value which persists across all API calls from search through confirm
   * @return transactionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "This is a unique value which persists across all API calls from search through confirm")

  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public Context messageId(String messageId) {
    
    this.messageId = messageId;
    return this;
  }

   /**
   * This is a unique value which persists during a request / callback cycle
   * @return messageId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "This is a unique value which persists during a request / callback cycle")

  public String getMessageId() {
    return messageId;
  }


  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }


  public Context timestamp(OffsetDateTime timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Time of request generation in RFC3339 format
   * @return timestamp
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Time of request generation in RFC3339 format")

  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public Context key(String key) {
    
    this.key = key;
    return this;
  }

   /**
   * The encryption public key of the sender
   * @return key
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The encryption public key of the sender")

  public String getKey() {
    return key;
  }


  public void setKey(String key) {
    this.key = key;
  }


  public Context ttl(String ttl) {
    
    this.ttl = ttl;
    return this;
  }

   /**
   * The duration in ISO8601 format after timestamp for which this message holds valid.
   * @return ttl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The duration in ISO8601 format after timestamp for which this message holds valid.")

  public String getTtl() {
    return ttl;
  }


  public void setTtl(String ttl) {
    this.ttl = ttl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Context context = (Context) o;
    return Objects.equals(this.domain, context.domain) &&
        Objects.equals(this.country, context.country) &&
        Objects.equals(this.city, context.city) &&
        Objects.equals(this.action, context.action) &&
        Objects.equals(this.coreVersion, context.coreVersion) &&
        Objects.equals(this.bapId, context.bapId) &&
        Objects.equals(this.bapUri, context.bapUri) &&
        Objects.equals(this.bppId, context.bppId) &&
        Objects.equals(this.bppUri, context.bppUri) &&
        Objects.equals(this.transactionId, context.transactionId) &&
        Objects.equals(this.messageId, context.messageId) &&
        Objects.equals(this.timestamp, context.timestamp) &&
        Objects.equals(this.key, context.key) &&
        Objects.equals(this.ttl, context.ttl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domain, country, city, action, coreVersion, bapId, bapUri, bppId, bppUri, transactionId, messageId, timestamp, key, ttl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Context {\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    coreVersion: ").append(toIndentedString(coreVersion)).append("\n");
    sb.append("    bapId: ").append(toIndentedString(bapId)).append("\n");
    sb.append("    bapUri: ").append(toIndentedString(bapUri)).append("\n");
    sb.append("    bppId: ").append(toIndentedString(bppId)).append("\n");
    sb.append("    bppUri: ").append(toIndentedString(bppUri)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domain");
    openapiFields.add("country");
    openapiFields.add("city");
    openapiFields.add("action");
    openapiFields.add("core_version");
    openapiFields.add("bap_id");
    openapiFields.add("bap_uri");
    openapiFields.add("bpp_id");
    openapiFields.add("bpp_uri");
    openapiFields.add("transaction_id");
    openapiFields.add("message_id");
    openapiFields.add("timestamp");
    openapiFields.add("key");
    openapiFields.add("ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("domain");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("core_version");
    openapiRequiredFields.add("bap_id");
    openapiRequiredFields.add("bap_uri");
    openapiRequiredFields.add("transaction_id");
    openapiRequiredFields.add("message_id");
    openapiRequiredFields.add("timestamp");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Context
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Context.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Context is not found in the empty JSON string", Context.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Context.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Context` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Context.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if ((jsonObj.get("core_version") != null && !jsonObj.get("core_version").isJsonNull()) && !jsonObj.get("core_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `core_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("core_version").toString()));
      }
      if ((jsonObj.get("bap_id") != null && !jsonObj.get("bap_id").isJsonNull()) && !jsonObj.get("bap_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bap_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bap_id").toString()));
      }
      if ((jsonObj.get("bap_uri") != null && !jsonObj.get("bap_uri").isJsonNull()) && !jsonObj.get("bap_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bap_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bap_uri").toString()));
      }
      if ((jsonObj.get("bpp_id") != null && !jsonObj.get("bpp_id").isJsonNull()) && !jsonObj.get("bpp_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bpp_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bpp_id").toString()));
      }
      if ((jsonObj.get("bpp_uri") != null && !jsonObj.get("bpp_uri").isJsonNull()) && !jsonObj.get("bpp_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bpp_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bpp_uri").toString()));
      }
      if ((jsonObj.get("transaction_id") != null && !jsonObj.get("transaction_id").isJsonNull()) && !jsonObj.get("transaction_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_id").toString()));
      }
      if ((jsonObj.get("message_id") != null && !jsonObj.get("message_id").isJsonNull()) && !jsonObj.get("message_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message_id").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("ttl") != null && !jsonObj.get("ttl").isJsonNull()) && !jsonObj.get("ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ttl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Context.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Context' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Context> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Context.class));

       return (TypeAdapter<T>) new TypeAdapter<Context>() {
           @Override
           public void write(JsonWriter out, Context value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Context read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Context given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Context
  * @throws IOException if the JSON string is invalid with respect to Context
  */
  public static Context fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Context.class);
  }

 /**
  * Convert an instance of Context to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

