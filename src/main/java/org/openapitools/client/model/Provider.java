/*
 * ONDC Protocol Core API
 * ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.Descriptor;
import org.openapitools.client.model.Fulfillment;
import org.openapitools.client.model.Item;
import org.openapitools.client.model.Offer;
import org.openapitools.client.model.Payment;
import org.openapitools.client.model.ProviderLocationsInner;
import org.openapitools.client.model.Time;
import org.openapitools.client.model.Value;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a service provider. This can be a restaurant, a hospital, a Store etc
 */
@ApiModel(description = "Describes a service provider. This can be a restaurant, a hospital, a Store etc")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-21T15:31:26.696+05:30[Asia/Kolkata]")
public class Provider {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DESCRIPTOR = "descriptor";
  @SerializedName(SERIALIZED_NAME_DESCRIPTOR)
  private Descriptor descriptor;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "category_id";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private String categoryId;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private Value rating = null;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private Time time;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<Category> categories = null;

  public static final String SERIALIZED_NAME_FULFILLMENTS = "fulfillments";
  @SerializedName(SERIALIZED_NAME_FULFILLMENTS)
  private List<Fulfillment> fulfillments = null;

  public static final String SERIALIZED_NAME_PAYMENTS = "payments";
  @SerializedName(SERIALIZED_NAME_PAYMENTS)
  private List<Payment> payments = null;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<ProviderLocationsInner> locations = null;

  public static final String SERIALIZED_NAME_OFFERS = "offers";
  @SerializedName(SERIALIZED_NAME_OFFERS)
  private List<Offer> offers = null;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<Item> items = null;

  public static final String SERIALIZED_NAME_EXP = "exp";
  @SerializedName(SERIALIZED_NAME_EXP)
  private OffsetDateTime exp;

  public static final String SERIALIZED_NAME_RATEABLE = "rateable";
  @SerializedName(SERIALIZED_NAME_RATEABLE)
  private Boolean rateable;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = null;

  public Provider() {
  }

  public Provider id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Id of the provider
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Id of the provider")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Provider descriptor(Descriptor descriptor) {
    
    this.descriptor = descriptor;
    return this;
  }

   /**
   * Get descriptor
   * @return descriptor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Descriptor getDescriptor() {
    return descriptor;
  }


  public void setDescriptor(Descriptor descriptor) {
    this.descriptor = descriptor;
  }


  public Provider categoryId(String categoryId) {
    
    this.categoryId = categoryId;
    return this;
  }

   /**
   * Category Id of the provider
   * @return categoryId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Category Id of the provider")

  public String getCategoryId() {
    return categoryId;
  }


  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }


  public Provider rating(Value rating) {
    
    this.rating = rating;
    return this;
  }

   /**
   * Get rating
   * @return rating
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Value getRating() {
    return rating;
  }


  public void setRating(Value rating) {
    this.rating = rating;
  }


  public Provider time(Time time) {
    
    this.time = time;
    return this;
  }

   /**
   * Get time
   * @return time
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Time getTime() {
    return time;
  }


  public void setTime(Time time) {
    this.time = time;
  }


  public Provider categories(List<Category> categories) {
    
    this.categories = categories;
    return this;
  }

  public Provider addCategoriesItem(Category categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Category> getCategories() {
    return categories;
  }


  public void setCategories(List<Category> categories) {
    this.categories = categories;
  }


  public Provider fulfillments(List<Fulfillment> fulfillments) {
    
    this.fulfillments = fulfillments;
    return this;
  }

  public Provider addFulfillmentsItem(Fulfillment fulfillmentsItem) {
    if (this.fulfillments == null) {
      this.fulfillments = new ArrayList<>();
    }
    this.fulfillments.add(fulfillmentsItem);
    return this;
  }

   /**
   * Get fulfillments
   * @return fulfillments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Fulfillment> getFulfillments() {
    return fulfillments;
  }


  public void setFulfillments(List<Fulfillment> fulfillments) {
    this.fulfillments = fulfillments;
  }


  public Provider payments(List<Payment> payments) {
    
    this.payments = payments;
    return this;
  }

  public Provider addPaymentsItem(Payment paymentsItem) {
    if (this.payments == null) {
      this.payments = new ArrayList<>();
    }
    this.payments.add(paymentsItem);
    return this;
  }

   /**
   * Get payments
   * @return payments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Payment> getPayments() {
    return payments;
  }


  public void setPayments(List<Payment> payments) {
    this.payments = payments;
  }


  public Provider locations(List<ProviderLocationsInner> locations) {
    
    this.locations = locations;
    return this;
  }

  public Provider addLocationsItem(ProviderLocationsInner locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

   /**
   * Get locations
   * @return locations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ProviderLocationsInner> getLocations() {
    return locations;
  }


  public void setLocations(List<ProviderLocationsInner> locations) {
    this.locations = locations;
  }


  public Provider offers(List<Offer> offers) {
    
    this.offers = offers;
    return this;
  }

  public Provider addOffersItem(Offer offersItem) {
    if (this.offers == null) {
      this.offers = new ArrayList<>();
    }
    this.offers.add(offersItem);
    return this;
  }

   /**
   * Get offers
   * @return offers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Offer> getOffers() {
    return offers;
  }


  public void setOffers(List<Offer> offers) {
    this.offers = offers;
  }


  public Provider items(List<Item> items) {
    
    this.items = items;
    return this;
  }

  public Provider addItemsItem(Item itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Item> getItems() {
    return items;
  }


  public void setItems(List<Item> items) {
    this.items = items;
  }


  public Provider exp(OffsetDateTime exp) {
    
    this.exp = exp;
    return this;
  }

   /**
   * Time after which catalog has to be refreshed
   * @return exp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Time after which catalog has to be refreshed")

  public OffsetDateTime getExp() {
    return exp;
  }


  public void setExp(OffsetDateTime exp) {
    this.exp = exp;
  }


  public Provider rateable(Boolean rateable) {
    
    this.rateable = rateable;
    return this;
  }

   /**
   * If the entity can be rated or not
   * @return rateable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the entity can be rated or not")

  public Boolean getRateable() {
    return rateable;
  }


  public void setRateable(Boolean rateable) {
    this.rateable = rateable;
  }


  public Provider tags(Map<String, String> tags) {
    
    this.tags = tags;
    return this;
  }

  public Provider putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

   /**
   * Describes a tag. This is a simple key-value store which is used to contain extended metadata
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Describes a tag. This is a simple key-value store which is used to contain extended metadata")

  public Map<String, String> getTags() {
    return tags;
  }


  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Provider provider = (Provider) o;
    return Objects.equals(this.id, provider.id) &&
        Objects.equals(this.descriptor, provider.descriptor) &&
        Objects.equals(this.categoryId, provider.categoryId) &&
        Objects.equals(this.rating, provider.rating) &&
        Objects.equals(this.time, provider.time) &&
        Objects.equals(this.categories, provider.categories) &&
        Objects.equals(this.fulfillments, provider.fulfillments) &&
        Objects.equals(this.payments, provider.payments) &&
        Objects.equals(this.locations, provider.locations) &&
        Objects.equals(this.offers, provider.offers) &&
        Objects.equals(this.items, provider.items) &&
        Objects.equals(this.exp, provider.exp) &&
        Objects.equals(this.rateable, provider.rateable) &&
        Objects.equals(this.tags, provider.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, descriptor, categoryId, rating, time, categories, fulfillments, payments, locations, offers, items, exp, rateable, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Provider {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    descriptor: ").append(toIndentedString(descriptor)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    fulfillments: ").append(toIndentedString(fulfillments)).append("\n");
    sb.append("    payments: ").append(toIndentedString(payments)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    offers: ").append(toIndentedString(offers)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    exp: ").append(toIndentedString(exp)).append("\n");
    sb.append("    rateable: ").append(toIndentedString(rateable)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("descriptor");
    openapiFields.add("category_id");
    openapiFields.add("rating");
    openapiFields.add("time");
    openapiFields.add("categories");
    openapiFields.add("fulfillments");
    openapiFields.add("payments");
    openapiFields.add("locations");
    openapiFields.add("offers");
    openapiFields.add("items");
    openapiFields.add("exp");
    openapiFields.add("rateable");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Provider
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Provider.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Provider is not found in the empty JSON string", Provider.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Provider.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Provider` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `descriptor`
      if (jsonObj.get("descriptor") != null && !jsonObj.get("descriptor").isJsonNull()) {
        Descriptor.validateJsonObject(jsonObj.getAsJsonObject("descriptor"));
      }
      if ((jsonObj.get("category_id") != null && !jsonObj.get("category_id").isJsonNull()) && !jsonObj.get("category_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_id").toString()));
      }
      // validate the optional field `time`
      if (jsonObj.get("time") != null && !jsonObj.get("time").isJsonNull()) {
        Time.validateJsonObject(jsonObj.getAsJsonObject("time"));
      }
      JsonArray jsonArraycategories = jsonObj.getAsJsonArray("categories");
      if (jsonArraycategories != null) {
        // ensure the json data is an array
        if (!jsonObj.get("categories").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
        }

        // validate the optional field `categories` (array)
        for (int i = 0; i < jsonArraycategories.size(); i++) {
          Category.validateJsonObject(jsonArraycategories.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArrayfulfillments = jsonObj.getAsJsonArray("fulfillments");
      if (jsonArrayfulfillments != null) {
        // ensure the json data is an array
        if (!jsonObj.get("fulfillments").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `fulfillments` to be an array in the JSON string but got `%s`", jsonObj.get("fulfillments").toString()));
        }

        // validate the optional field `fulfillments` (array)
        for (int i = 0; i < jsonArrayfulfillments.size(); i++) {
          Fulfillment.validateJsonObject(jsonArrayfulfillments.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraypayments = jsonObj.getAsJsonArray("payments");
      if (jsonArraypayments != null) {
        // ensure the json data is an array
        if (!jsonObj.get("payments").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `payments` to be an array in the JSON string but got `%s`", jsonObj.get("payments").toString()));
        }

        // validate the optional field `payments` (array)
        for (int i = 0; i < jsonArraypayments.size(); i++) {
          Payment.validateJsonObject(jsonArraypayments.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraylocations = jsonObj.getAsJsonArray("locations");
      if (jsonArraylocations != null) {
        // ensure the json data is an array
        if (!jsonObj.get("locations").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
        }

        // validate the optional field `locations` (array)
        for (int i = 0; i < jsonArraylocations.size(); i++) {
          ProviderLocationsInner.validateJsonObject(jsonArraylocations.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArrayoffers = jsonObj.getAsJsonArray("offers");
      if (jsonArrayoffers != null) {
        // ensure the json data is an array
        if (!jsonObj.get("offers").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `offers` to be an array in the JSON string but got `%s`", jsonObj.get("offers").toString()));
        }

        // validate the optional field `offers` (array)
        for (int i = 0; i < jsonArrayoffers.size(); i++) {
          Offer.validateJsonObject(jsonArrayoffers.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
      if (jsonArrayitems != null) {
        // ensure the json data is an array
        if (!jsonObj.get("items").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
        }

        // validate the optional field `items` (array)
        for (int i = 0; i < jsonArrayitems.size(); i++) {
          Item.validateJsonObject(jsonArrayitems.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Provider.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Provider' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Provider> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Provider.class));

       return (TypeAdapter<T>) new TypeAdapter<Provider>() {
           @Override
           public void write(JsonWriter out, Provider value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Provider read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Provider given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Provider
  * @throws IOException if the JSON string is invalid with respect to Provider
  */
  public static Provider fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Provider.class);
  }

 /**
  * Convert an instance of Provider to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

