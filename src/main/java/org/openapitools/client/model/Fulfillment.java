/*
 * ONDC Protocol Core API
 * ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.Agent;
import org.openapitools.client.model.Contact;
import org.openapitools.client.model.FulfillmentCustomer;
import org.openapitools.client.model.FulfillmentEnd;
import org.openapitools.client.model.FulfillmentStart;
import org.openapitools.client.model.Id;
import org.openapitools.client.model.Person;
import org.openapitools.client.model.State;
import org.openapitools.client.model.Value;
import org.openapitools.client.model.Vehicle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes how a single product/service will be rendered/fulfilled to the end customer
 */
@ApiModel(description = "Describes how a single product/service will be rendered/fulfilled to the end customer")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-21T15:31:26.696+05:30[Asia/Kolkata]")
public class Fulfillment {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_PROVIDER_ID = "provider_id";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ID)
  private Id providerId = null;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private Value rating = null;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private State state;

  public static final String SERIALIZED_NAME_TRACKING = "tracking";
  @SerializedName(SERIALIZED_NAME_TRACKING)
  private Boolean tracking = false;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private FulfillmentCustomer customer;

  public static final String SERIALIZED_NAME_AGENT = "agent";
  @SerializedName(SERIALIZED_NAME_AGENT)
  private Agent agent;

  public static final String SERIALIZED_NAME_PERSON = "person";
  @SerializedName(SERIALIZED_NAME_PERSON)
  private Person person;

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private Contact contact;

  public static final String SERIALIZED_NAME_VEHICLE = "vehicle";
  @SerializedName(SERIALIZED_NAME_VEHICLE)
  private Vehicle vehicle;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private FulfillmentStart start;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private FulfillmentEnd end;

  public static final String SERIALIZED_NAME_RATEABLE = "rateable";
  @SerializedName(SERIALIZED_NAME_RATEABLE)
  private Boolean rateable;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = null;

  public Fulfillment() {
  }

  public Fulfillment id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique reference ID to the fulfillment of an order
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique reference ID to the fulfillment of an order")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Fulfillment type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * This describes the type of fulfillment
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This describes the type of fulfillment")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public Fulfillment providerId(Id providerId) {
    
    this.providerId = providerId;
    return this;
  }

   /**
   * Get providerId
   * @return providerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Id getProviderId() {
    return providerId;
  }


  public void setProviderId(Id providerId) {
    this.providerId = providerId;
  }


  public Fulfillment rating(Value rating) {
    
    this.rating = rating;
    return this;
  }

   /**
   * Get rating
   * @return rating
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Value getRating() {
    return rating;
  }


  public void setRating(Value rating) {
    this.rating = rating;
  }


  public Fulfillment state(State state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public State getState() {
    return state;
  }


  public void setState(State state) {
    this.state = state;
  }


  public Fulfillment tracking(Boolean tracking) {
    
    this.tracking = tracking;
    return this;
  }

   /**
   * Indicates whether the fulfillment allows tracking
   * @return tracking
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the fulfillment allows tracking")

  public Boolean getTracking() {
    return tracking;
  }


  public void setTracking(Boolean tracking) {
    this.tracking = tracking;
  }


  public Fulfillment customer(FulfillmentCustomer customer) {
    
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FulfillmentCustomer getCustomer() {
    return customer;
  }


  public void setCustomer(FulfillmentCustomer customer) {
    this.customer = customer;
  }


  public Fulfillment agent(Agent agent) {
    
    this.agent = agent;
    return this;
  }

   /**
   * Get agent
   * @return agent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Agent getAgent() {
    return agent;
  }


  public void setAgent(Agent agent) {
    this.agent = agent;
  }


  public Fulfillment person(Person person) {
    
    this.person = person;
    return this;
  }

   /**
   * Get person
   * @return person
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Person getPerson() {
    return person;
  }


  public void setPerson(Person person) {
    this.person = person;
  }


  public Fulfillment contact(Contact contact) {
    
    this.contact = contact;
    return this;
  }

   /**
   * Get contact
   * @return contact
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Contact getContact() {
    return contact;
  }


  public void setContact(Contact contact) {
    this.contact = contact;
  }


  public Fulfillment vehicle(Vehicle vehicle) {
    
    this.vehicle = vehicle;
    return this;
  }

   /**
   * Get vehicle
   * @return vehicle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Vehicle getVehicle() {
    return vehicle;
  }


  public void setVehicle(Vehicle vehicle) {
    this.vehicle = vehicle;
  }


  public Fulfillment start(FulfillmentStart start) {
    
    this.start = start;
    return this;
  }

   /**
   * Get start
   * @return start
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FulfillmentStart getStart() {
    return start;
  }


  public void setStart(FulfillmentStart start) {
    this.start = start;
  }


  public Fulfillment end(FulfillmentEnd end) {
    
    this.end = end;
    return this;
  }

   /**
   * Get end
   * @return end
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FulfillmentEnd getEnd() {
    return end;
  }


  public void setEnd(FulfillmentEnd end) {
    this.end = end;
  }


  public Fulfillment rateable(Boolean rateable) {
    
    this.rateable = rateable;
    return this;
  }

   /**
   * If the entity can be rated or not
   * @return rateable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the entity can be rated or not")

  public Boolean getRateable() {
    return rateable;
  }


  public void setRateable(Boolean rateable) {
    this.rateable = rateable;
  }


  public Fulfillment tags(Map<String, String> tags) {
    
    this.tags = tags;
    return this;
  }

  public Fulfillment putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

   /**
   * Describes a tag. This is a simple key-value store which is used to contain extended metadata
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Describes a tag. This is a simple key-value store which is used to contain extended metadata")

  public Map<String, String> getTags() {
    return tags;
  }


  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Fulfillment fulfillment = (Fulfillment) o;
    return Objects.equals(this.id, fulfillment.id) &&
        Objects.equals(this.type, fulfillment.type) &&
        Objects.equals(this.providerId, fulfillment.providerId) &&
        Objects.equals(this.rating, fulfillment.rating) &&
        Objects.equals(this.state, fulfillment.state) &&
        Objects.equals(this.tracking, fulfillment.tracking) &&
        Objects.equals(this.customer, fulfillment.customer) &&
        Objects.equals(this.agent, fulfillment.agent) &&
        Objects.equals(this.person, fulfillment.person) &&
        Objects.equals(this.contact, fulfillment.contact) &&
        Objects.equals(this.vehicle, fulfillment.vehicle) &&
        Objects.equals(this.start, fulfillment.start) &&
        Objects.equals(this.end, fulfillment.end) &&
        Objects.equals(this.rateable, fulfillment.rateable) &&
        Objects.equals(this.tags, fulfillment.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, providerId, rating, state, tracking, customer, agent, person, contact, vehicle, start, end, rateable, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Fulfillment {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    tracking: ").append(toIndentedString(tracking)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    agent: ").append(toIndentedString(agent)).append("\n");
    sb.append("    person: ").append(toIndentedString(person)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    vehicle: ").append(toIndentedString(vehicle)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    rateable: ").append(toIndentedString(rateable)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("provider_id");
    openapiFields.add("rating");
    openapiFields.add("state");
    openapiFields.add("tracking");
    openapiFields.add("customer");
    openapiFields.add("agent");
    openapiFields.add("person");
    openapiFields.add("contact");
    openapiFields.add("vehicle");
    openapiFields.add("start");
    openapiFields.add("end");
    openapiFields.add("rateable");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Fulfillment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Fulfillment.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Fulfillment is not found in the empty JSON string", Fulfillment.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Fulfillment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Fulfillment` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        State.validateJsonObject(jsonObj.getAsJsonObject("state"));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        FulfillmentCustomer.validateJsonObject(jsonObj.getAsJsonObject("customer"));
      }
      // validate the optional field `agent`
      if (jsonObj.get("agent") != null && !jsonObj.get("agent").isJsonNull()) {
        Agent.validateJsonObject(jsonObj.getAsJsonObject("agent"));
      }
      // validate the optional field `person`
      if (jsonObj.get("person") != null && !jsonObj.get("person").isJsonNull()) {
        Person.validateJsonObject(jsonObj.getAsJsonObject("person"));
      }
      // validate the optional field `contact`
      if (jsonObj.get("contact") != null && !jsonObj.get("contact").isJsonNull()) {
        Contact.validateJsonObject(jsonObj.getAsJsonObject("contact"));
      }
      // validate the optional field `vehicle`
      if (jsonObj.get("vehicle") != null && !jsonObj.get("vehicle").isJsonNull()) {
        Vehicle.validateJsonObject(jsonObj.getAsJsonObject("vehicle"));
      }
      // validate the optional field `start`
      if (jsonObj.get("start") != null && !jsonObj.get("start").isJsonNull()) {
        FulfillmentStart.validateJsonObject(jsonObj.getAsJsonObject("start"));
      }
      // validate the optional field `end`
      if (jsonObj.get("end") != null && !jsonObj.get("end").isJsonNull()) {
        FulfillmentEnd.validateJsonObject(jsonObj.getAsJsonObject("end"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Fulfillment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Fulfillment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Fulfillment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Fulfillment.class));

       return (TypeAdapter<T>) new TypeAdapter<Fulfillment>() {
           @Override
           public void write(JsonWriter out, Fulfillment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Fulfillment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Fulfillment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Fulfillment
  * @throws IOException if the JSON string is invalid with respect to Fulfillment
  */
  public static Fulfillment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Fulfillment.class);
  }

 /**
  * Convert an instance of Fulfillment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

