/*
 * ONDC Protocol Core API
 * ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.Circle;
import org.openapitools.client.model.City;
import org.openapitools.client.model.Country;
import org.openapitools.client.model.Descriptor;
import org.openapitools.client.model.Time;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the location of a runtime object.
 */
@ApiModel(description = "Describes the location of a runtime object.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-21T15:31:26.696+05:30[Asia/Kolkata]")
public class Location {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DESCRIPTOR = "descriptor";
  @SerializedName(SERIALIZED_NAME_DESCRIPTOR)
  private Descriptor descriptor;

  public static final String SERIALIZED_NAME_GPS = "gps";
  @SerializedName(SERIALIZED_NAME_GPS)
  private String gps;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_STATION_CODE = "station_code";
  @SerializedName(SERIALIZED_NAME_STATION_CODE)
  private String stationCode;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private City city;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private Country country;

  public static final String SERIALIZED_NAME_CIRCLE = "circle";
  @SerializedName(SERIALIZED_NAME_CIRCLE)
  private Circle circle;

  public static final String SERIALIZED_NAME_POLYGON = "polygon";
  @SerializedName(SERIALIZED_NAME_POLYGON)
  private String polygon;

  public static final String SERIALIZED_NAME_3DSPACE = "3dspace";
  @SerializedName(SERIALIZED_NAME_3DSPACE)
  private String _3dspace;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private Time time;

  public Location() {
  }

  public Location id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Location descriptor(Descriptor descriptor) {
    
    this.descriptor = descriptor;
    return this;
  }

   /**
   * Get descriptor
   * @return descriptor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Descriptor getDescriptor() {
    return descriptor;
  }


  public void setDescriptor(Descriptor descriptor) {
    this.descriptor = descriptor;
  }


  public Location gps(String gps) {
    
    this.gps = gps;
    return this;
  }

   /**
   * Describes a gps coordinate
   * @return gps
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Describes a gps coordinate")

  public String getGps() {
    return gps;
  }


  public void setGps(String gps) {
    this.gps = gps;
  }


  public Location address(Address address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Address getAddress() {
    return address;
  }


  public void setAddress(Address address) {
    this.address = address;
  }


  public Location stationCode(String stationCode) {
    
    this.stationCode = stationCode;
    return this;
  }

   /**
   * Get stationCode
   * @return stationCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStationCode() {
    return stationCode;
  }


  public void setStationCode(String stationCode) {
    this.stationCode = stationCode;
  }


  public Location city(City city) {
    
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public City getCity() {
    return city;
  }


  public void setCity(City city) {
    this.city = city;
  }


  public Location country(Country country) {
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Country getCountry() {
    return country;
  }


  public void setCountry(Country country) {
    this.country = country;
  }


  public Location circle(Circle circle) {
    
    this.circle = circle;
    return this;
  }

   /**
   * Get circle
   * @return circle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Circle getCircle() {
    return circle;
  }


  public void setCircle(Circle circle) {
    this.circle = circle;
  }


  public Location polygon(String polygon) {
    
    this.polygon = polygon;
    return this;
  }

   /**
   * Get polygon
   * @return polygon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPolygon() {
    return polygon;
  }


  public void setPolygon(String polygon) {
    this.polygon = polygon;
  }


  public Location _3dspace(String _3dspace) {
    
    this._3dspace = _3dspace;
    return this;
  }

   /**
   * Get _3dspace
   * @return _3dspace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String get3dspace() {
    return _3dspace;
  }


  public void set3dspace(String _3dspace) {
    this._3dspace = _3dspace;
  }


  public Location time(Time time) {
    
    this.time = time;
    return this;
  }

   /**
   * Get time
   * @return time
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Time getTime() {
    return time;
  }


  public void setTime(Time time) {
    this.time = time;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Location location = (Location) o;
    return Objects.equals(this.id, location.id) &&
        Objects.equals(this.descriptor, location.descriptor) &&
        Objects.equals(this.gps, location.gps) &&
        Objects.equals(this.address, location.address) &&
        Objects.equals(this.stationCode, location.stationCode) &&
        Objects.equals(this.city, location.city) &&
        Objects.equals(this.country, location.country) &&
        Objects.equals(this.circle, location.circle) &&
        Objects.equals(this.polygon, location.polygon) &&
        Objects.equals(this._3dspace, location._3dspace) &&
        Objects.equals(this.time, location.time);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, descriptor, gps, address, stationCode, city, country, circle, polygon, _3dspace, time);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Location {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    descriptor: ").append(toIndentedString(descriptor)).append("\n");
    sb.append("    gps: ").append(toIndentedString(gps)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    stationCode: ").append(toIndentedString(stationCode)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    circle: ").append(toIndentedString(circle)).append("\n");
    sb.append("    polygon: ").append(toIndentedString(polygon)).append("\n");
    sb.append("    _3dspace: ").append(toIndentedString(_3dspace)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("descriptor");
    openapiFields.add("gps");
    openapiFields.add("address");
    openapiFields.add("station_code");
    openapiFields.add("city");
    openapiFields.add("country");
    openapiFields.add("circle");
    openapiFields.add("polygon");
    openapiFields.add("3dspace");
    openapiFields.add("time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Location
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Location.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Location is not found in the empty JSON string", Location.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Location.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Location` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `descriptor`
      if (jsonObj.get("descriptor") != null && !jsonObj.get("descriptor").isJsonNull()) {
        Descriptor.validateJsonObject(jsonObj.getAsJsonObject("descriptor"));
      }
      if ((jsonObj.get("gps") != null && !jsonObj.get("gps").isJsonNull()) && !jsonObj.get("gps").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gps` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gps").toString()));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Address.validateJsonObject(jsonObj.getAsJsonObject("address"));
      }
      if ((jsonObj.get("station_code") != null && !jsonObj.get("station_code").isJsonNull()) && !jsonObj.get("station_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `station_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("station_code").toString()));
      }
      // validate the optional field `city`
      if (jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) {
        City.validateJsonObject(jsonObj.getAsJsonObject("city"));
      }
      // validate the optional field `country`
      if (jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) {
        Country.validateJsonObject(jsonObj.getAsJsonObject("country"));
      }
      // validate the optional field `circle`
      if (jsonObj.get("circle") != null && !jsonObj.get("circle").isJsonNull()) {
        Circle.validateJsonObject(jsonObj.getAsJsonObject("circle"));
      }
      if ((jsonObj.get("polygon") != null && !jsonObj.get("polygon").isJsonNull()) && !jsonObj.get("polygon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `polygon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("polygon").toString()));
      }
      if ((jsonObj.get("3dspace") != null && !jsonObj.get("3dspace").isJsonNull()) && !jsonObj.get("3dspace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `3dspace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("3dspace").toString()));
      }
      // validate the optional field `time`
      if (jsonObj.get("time") != null && !jsonObj.get("time").isJsonNull()) {
        Time.validateJsonObject(jsonObj.getAsJsonObject("time"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Location.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Location' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Location> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Location.class));

       return (TypeAdapter<T>) new TypeAdapter<Location>() {
           @Override
           public void write(JsonWriter out, Location value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Location read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Location given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Location
  * @throws IOException if the JSON string is invalid with respect to Location
  */
  public static Location fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Location.class);
  }

 /**
  * Convert an instance of Location to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

