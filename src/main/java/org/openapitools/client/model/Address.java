/*
 * ONDC Protocol Core API
 * ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes an address
 */
@ApiModel(description = "Describes an address")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-21T15:31:26.696+05:30[Asia/Kolkata]")
public class Address {
  public static final String SERIALIZED_NAME_DOOR = "door";
  @SerializedName(SERIALIZED_NAME_DOOR)
  private String door;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_BUILDING = "building";
  @SerializedName(SERIALIZED_NAME_BUILDING)
  private String building;

  public static final String SERIALIZED_NAME_STREET = "street";
  @SerializedName(SERIALIZED_NAME_STREET)
  private String street;

  public static final String SERIALIZED_NAME_LOCALITY = "locality";
  @SerializedName(SERIALIZED_NAME_LOCALITY)
  private String locality;

  public static final String SERIALIZED_NAME_WARD = "ward";
  @SerializedName(SERIALIZED_NAME_WARD)
  private String ward;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_AREA_CODE = "area_code";
  @SerializedName(SERIALIZED_NAME_AREA_CODE)
  private String areaCode;

  public Address() {
  }

  public Address door(String door) {
    
    this.door = door;
    return this;
  }

   /**
   * Door / Shop number of the address
   * @return door
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Door / Shop number of the address")

  public String getDoor() {
    return door;
  }


  public void setDoor(String door) {
    this.door = door;
  }


  public Address name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of address if applicable. Example, shop name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of address if applicable. Example, shop name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Address building(String building) {
    
    this.building = building;
    return this;
  }

   /**
   * Name of the building or block
   * @return building
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the building or block")

  public String getBuilding() {
    return building;
  }


  public void setBuilding(String building) {
    this.building = building;
  }


  public Address street(String street) {
    
    this.street = street;
    return this;
  }

   /**
   * Street name or number
   * @return street
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Street name or number")

  public String getStreet() {
    return street;
  }


  public void setStreet(String street) {
    this.street = street;
  }


  public Address locality(String locality) {
    
    this.locality = locality;
    return this;
  }

   /**
   * Name of the locality, apartments
   * @return locality
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the locality, apartments")

  public String getLocality() {
    return locality;
  }


  public void setLocality(String locality) {
    this.locality = locality;
  }


  public Address ward(String ward) {
    
    this.ward = ward;
    return this;
  }

   /**
   * Name or number of the ward if applicable
   * @return ward
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name or number of the ward if applicable")

  public String getWard() {
    return ward;
  }


  public void setWard(String ward) {
    this.ward = ward;
  }


  public Address city(String city) {
    
    this.city = city;
    return this;
  }

   /**
   * City name
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "City name")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    this.city = city;
  }


  public Address state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * State name
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "State name")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    this.state = state;
  }


  public Address country(String country) {
    
    this.country = country;
    return this;
  }

   /**
   * Country name
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Country name")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    this.country = country;
  }


  public Address areaCode(String areaCode) {
    
    this.areaCode = areaCode;
    return this;
  }

   /**
   * Area code. This can be Pincode, ZIP code or any equivalent
   * @return areaCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Area code. This can be Pincode, ZIP code or any equivalent")

  public String getAreaCode() {
    return areaCode;
  }


  public void setAreaCode(String areaCode) {
    this.areaCode = areaCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Address address = (Address) o;
    return Objects.equals(this.door, address.door) &&
        Objects.equals(this.name, address.name) &&
        Objects.equals(this.building, address.building) &&
        Objects.equals(this.street, address.street) &&
        Objects.equals(this.locality, address.locality) &&
        Objects.equals(this.ward, address.ward) &&
        Objects.equals(this.city, address.city) &&
        Objects.equals(this.state, address.state) &&
        Objects.equals(this.country, address.country) &&
        Objects.equals(this.areaCode, address.areaCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(door, name, building, street, locality, ward, city, state, country, areaCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Address {\n");
    sb.append("    door: ").append(toIndentedString(door)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    building: ").append(toIndentedString(building)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    locality: ").append(toIndentedString(locality)).append("\n");
    sb.append("    ward: ").append(toIndentedString(ward)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    areaCode: ").append(toIndentedString(areaCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("door");
    openapiFields.add("name");
    openapiFields.add("building");
    openapiFields.add("street");
    openapiFields.add("locality");
    openapiFields.add("ward");
    openapiFields.add("city");
    openapiFields.add("state");
    openapiFields.add("country");
    openapiFields.add("area_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Address
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Address.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Address is not found in the empty JSON string", Address.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Address.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Address` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("door") != null && !jsonObj.get("door").isJsonNull()) && !jsonObj.get("door").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `door` to be a primitive type in the JSON string but got `%s`", jsonObj.get("door").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("building") != null && !jsonObj.get("building").isJsonNull()) && !jsonObj.get("building").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `building` to be a primitive type in the JSON string but got `%s`", jsonObj.get("building").toString()));
      }
      if ((jsonObj.get("street") != null && !jsonObj.get("street").isJsonNull()) && !jsonObj.get("street").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street").toString()));
      }
      if ((jsonObj.get("locality") != null && !jsonObj.get("locality").isJsonNull()) && !jsonObj.get("locality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locality").toString()));
      }
      if ((jsonObj.get("ward") != null && !jsonObj.get("ward").isJsonNull()) && !jsonObj.get("ward").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ward` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ward").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("area_code") != null && !jsonObj.get("area_code").isJsonNull()) && !jsonObj.get("area_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `area_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("area_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Address.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Address' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Address> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Address.class));

       return (TypeAdapter<T>) new TypeAdapter<Address>() {
           @Override
           public void write(JsonWriter out, Address value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Address read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Address given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Address
  * @throws IOException if the JSON string is invalid with respect to Address
  */
  public static Address fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Address.class);
  }

 /**
  * Convert an instance of Address to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

