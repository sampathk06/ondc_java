/*
 * ONDC Protocol Core API
 * ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.Billing;
import org.openapitools.client.model.Document;
import org.openapitools.client.model.Fulfillment;
import org.openapitools.client.model.OrderAddOnsInner;
import org.openapitools.client.model.OrderItemsInner;
import org.openapitools.client.model.OrderOffersInner;
import org.openapitools.client.model.OrderProvider;
import org.openapitools.client.model.Payment;
import org.openapitools.client.model.Quotation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the details of an order
 */
@ApiModel(description = "Describes the details of an order")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-21T15:31:26.696+05:30[Asia/Kolkata]")
public class Order {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private OrderProvider provider;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<OrderItemsInner> items = null;

  public static final String SERIALIZED_NAME_ADD_ONS = "add_ons";
  @SerializedName(SERIALIZED_NAME_ADD_ONS)
  private List<OrderAddOnsInner> addOns = null;

  public static final String SERIALIZED_NAME_OFFERS = "offers";
  @SerializedName(SERIALIZED_NAME_OFFERS)
  private List<OrderOffersInner> offers = null;

  public static final String SERIALIZED_NAME_DOCUMENTS = "documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  private List<Document> documents = null;

  public static final String SERIALIZED_NAME_BILLING = "billing";
  @SerializedName(SERIALIZED_NAME_BILLING)
  private Billing billing;

  public static final String SERIALIZED_NAME_FULFILLMENT = "fulfillment";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT)
  private Fulfillment fulfillment;

  public static final String SERIALIZED_NAME_QUOTE = "quote";
  @SerializedName(SERIALIZED_NAME_QUOTE)
  private Quotation quote;

  public static final String SERIALIZED_NAME_PAYMENT = "payment";
  @SerializedName(SERIALIZED_NAME_PAYMENT)
  private Payment payment;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public Order() {
  }

  public Order id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Hash of order object without id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Hash of order object without id")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Order state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    this.state = state;
  }


  public Order provider(OrderProvider provider) {
    
    this.provider = provider;
    return this;
  }

   /**
   * Get provider
   * @return provider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderProvider getProvider() {
    return provider;
  }


  public void setProvider(OrderProvider provider) {
    this.provider = provider;
  }


  public Order items(List<OrderItemsInner> items) {
    
    this.items = items;
    return this;
  }

  public Order addItemsItem(OrderItemsInner itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<OrderItemsInner> getItems() {
    return items;
  }


  public void setItems(List<OrderItemsInner> items) {
    this.items = items;
  }


  public Order addOns(List<OrderAddOnsInner> addOns) {
    
    this.addOns = addOns;
    return this;
  }

  public Order addAddOnsItem(OrderAddOnsInner addOnsItem) {
    if (this.addOns == null) {
      this.addOns = new ArrayList<>();
    }
    this.addOns.add(addOnsItem);
    return this;
  }

   /**
   * Get addOns
   * @return addOns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<OrderAddOnsInner> getAddOns() {
    return addOns;
  }


  public void setAddOns(List<OrderAddOnsInner> addOns) {
    this.addOns = addOns;
  }


  public Order offers(List<OrderOffersInner> offers) {
    
    this.offers = offers;
    return this;
  }

  public Order addOffersItem(OrderOffersInner offersItem) {
    if (this.offers == null) {
      this.offers = new ArrayList<>();
    }
    this.offers.add(offersItem);
    return this;
  }

   /**
   * Get offers
   * @return offers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<OrderOffersInner> getOffers() {
    return offers;
  }


  public void setOffers(List<OrderOffersInner> offers) {
    this.offers = offers;
  }


  public Order documents(List<Document> documents) {
    
    this.documents = documents;
    return this;
  }

  public Order addDocumentsItem(Document documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<>();
    }
    this.documents.add(documentsItem);
    return this;
  }

   /**
   * Get documents
   * @return documents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Document> getDocuments() {
    return documents;
  }


  public void setDocuments(List<Document> documents) {
    this.documents = documents;
  }


  public Order billing(Billing billing) {
    
    this.billing = billing;
    return this;
  }

   /**
   * Get billing
   * @return billing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Billing getBilling() {
    return billing;
  }


  public void setBilling(Billing billing) {
    this.billing = billing;
  }


  public Order fulfillment(Fulfillment fulfillment) {
    
    this.fulfillment = fulfillment;
    return this;
  }

   /**
   * Get fulfillment
   * @return fulfillment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Fulfillment getFulfillment() {
    return fulfillment;
  }


  public void setFulfillment(Fulfillment fulfillment) {
    this.fulfillment = fulfillment;
  }


  public Order quote(Quotation quote) {
    
    this.quote = quote;
    return this;
  }

   /**
   * Get quote
   * @return quote
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Quotation getQuote() {
    return quote;
  }


  public void setQuote(Quotation quote) {
    this.quote = quote;
  }


  public Order payment(Payment payment) {
    
    this.payment = payment;
    return this;
  }

   /**
   * Get payment
   * @return payment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Payment getPayment() {
    return payment;
  }


  public void setPayment(Payment payment) {
    this.payment = payment;
  }


  public Order createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Order updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Order order = (Order) o;
    return Objects.equals(this.id, order.id) &&
        Objects.equals(this.state, order.state) &&
        Objects.equals(this.provider, order.provider) &&
        Objects.equals(this.items, order.items) &&
        Objects.equals(this.addOns, order.addOns) &&
        Objects.equals(this.offers, order.offers) &&
        Objects.equals(this.documents, order.documents) &&
        Objects.equals(this.billing, order.billing) &&
        Objects.equals(this.fulfillment, order.fulfillment) &&
        Objects.equals(this.quote, order.quote) &&
        Objects.equals(this.payment, order.payment) &&
        Objects.equals(this.createdAt, order.createdAt) &&
        Objects.equals(this.updatedAt, order.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, state, provider, items, addOns, offers, documents, billing, fulfillment, quote, payment, createdAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Order {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    addOns: ").append(toIndentedString(addOns)).append("\n");
    sb.append("    offers: ").append(toIndentedString(offers)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
    sb.append("    fulfillment: ").append(toIndentedString(fulfillment)).append("\n");
    sb.append("    quote: ").append(toIndentedString(quote)).append("\n");
    sb.append("    payment: ").append(toIndentedString(payment)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("state");
    openapiFields.add("provider");
    openapiFields.add("items");
    openapiFields.add("add_ons");
    openapiFields.add("offers");
    openapiFields.add("documents");
    openapiFields.add("billing");
    openapiFields.add("fulfillment");
    openapiFields.add("quote");
    openapiFields.add("payment");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Order
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Order.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Order is not found in the empty JSON string", Order.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Order.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Order` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `provider`
      if (jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) {
        OrderProvider.validateJsonObject(jsonObj.getAsJsonObject("provider"));
      }
      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
      if (jsonArrayitems != null) {
        // ensure the json data is an array
        if (!jsonObj.get("items").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
        }

        // validate the optional field `items` (array)
        for (int i = 0; i < jsonArrayitems.size(); i++) {
          OrderItemsInner.validateJsonObject(jsonArrayitems.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArrayaddOns = jsonObj.getAsJsonArray("add_ons");
      if (jsonArrayaddOns != null) {
        // ensure the json data is an array
        if (!jsonObj.get("add_ons").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `add_ons` to be an array in the JSON string but got `%s`", jsonObj.get("add_ons").toString()));
        }

        // validate the optional field `add_ons` (array)
        for (int i = 0; i < jsonArrayaddOns.size(); i++) {
          OrderAddOnsInner.validateJsonObject(jsonArrayaddOns.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArrayoffers = jsonObj.getAsJsonArray("offers");
      if (jsonArrayoffers != null) {
        // ensure the json data is an array
        if (!jsonObj.get("offers").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `offers` to be an array in the JSON string but got `%s`", jsonObj.get("offers").toString()));
        }

        // validate the optional field `offers` (array)
        for (int i = 0; i < jsonArrayoffers.size(); i++) {
          OrderOffersInner.validateJsonObject(jsonArrayoffers.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraydocuments = jsonObj.getAsJsonArray("documents");
      if (jsonArraydocuments != null) {
        // ensure the json data is an array
        if (!jsonObj.get("documents").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `documents` to be an array in the JSON string but got `%s`", jsonObj.get("documents").toString()));
        }

        // validate the optional field `documents` (array)
        for (int i = 0; i < jsonArraydocuments.size(); i++) {
          Document.validateJsonObject(jsonArraydocuments.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `billing`
      if (jsonObj.get("billing") != null && !jsonObj.get("billing").isJsonNull()) {
        Billing.validateJsonObject(jsonObj.getAsJsonObject("billing"));
      }
      // validate the optional field `fulfillment`
      if (jsonObj.get("fulfillment") != null && !jsonObj.get("fulfillment").isJsonNull()) {
        Fulfillment.validateJsonObject(jsonObj.getAsJsonObject("fulfillment"));
      }
      // validate the optional field `quote`
      if (jsonObj.get("quote") != null && !jsonObj.get("quote").isJsonNull()) {
        Quotation.validateJsonObject(jsonObj.getAsJsonObject("quote"));
      }
      // validate the optional field `payment`
      if (jsonObj.get("payment") != null && !jsonObj.get("payment").isJsonNull()) {
        Payment.validateJsonObject(jsonObj.getAsJsonObject("payment"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Order.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Order' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Order> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Order.class));

       return (TypeAdapter<T>) new TypeAdapter<Order>() {
           @Override
           public void write(JsonWriter out, Order value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Order read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Order given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Order
  * @throws IOException if the JSON string is invalid with respect to Order
  */
  public static Order fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Order.class);
  }

 /**
  * Convert an instance of Order to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

