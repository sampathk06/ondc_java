/*
 * ONDC Protocol Core API
 * ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.Id;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An element in the feedback form. It can be question or an answer to the question.
 */
@ApiModel(description = "An element in the feedback form. It can be question or an answer to the question.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-21T15:31:26.696+05:30[Asia/Kolkata]")
public class FeedbackFormElement {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PARENT_ID = "parent_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private Id parentId = null;

  public static final String SERIALIZED_NAME_QUESTION = "question";
  @SerializedName(SERIALIZED_NAME_QUESTION)
  private String question;

  public static final String SERIALIZED_NAME_ANSWER = "answer";
  @SerializedName(SERIALIZED_NAME_ANSWER)
  private String answer;

  /**
   * Specifies how the answer option should be rendered.
   */
  @JsonAdapter(AnswerTypeEnum.Adapter.class)
  public enum AnswerTypeEnum {
    RADIO("radio"),
    
    CHECKBOX("checkbox"),
    
    TEXT("text");

    private String value;

    AnswerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnswerTypeEnum fromValue(String value) {
      for (AnswerTypeEnum b : AnswerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnswerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnswerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnswerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnswerTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ANSWER_TYPE = "answer_type";
  @SerializedName(SERIALIZED_NAME_ANSWER_TYPE)
  private AnswerTypeEnum answerType;

  public FeedbackFormElement() {
  }

  public FeedbackFormElement id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public FeedbackFormElement parentId(Id parentId) {
    
    this.parentId = parentId;
    return this;
  }

   /**
   * Get parentId
   * @return parentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Id getParentId() {
    return parentId;
  }


  public void setParentId(Id parentId) {
    this.parentId = parentId;
  }


  public FeedbackFormElement question(String question) {
    
    this.question = question;
    return this;
  }

   /**
   * Specifies the question to which the answer options will be contained in the child FeedbackFormElements
   * @return question
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the question to which the answer options will be contained in the child FeedbackFormElements")

  public String getQuestion() {
    return question;
  }


  public void setQuestion(String question) {
    this.question = question;
  }


  public FeedbackFormElement answer(String answer) {
    
    this.answer = answer;
    return this;
  }

   /**
   * Specifies an answer option to which the question will be in the FeedbackFormElement specified in parent_id
   * @return answer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies an answer option to which the question will be in the FeedbackFormElement specified in parent_id")

  public String getAnswer() {
    return answer;
  }


  public void setAnswer(String answer) {
    this.answer = answer;
  }


  public FeedbackFormElement answerType(AnswerTypeEnum answerType) {
    
    this.answerType = answerType;
    return this;
  }

   /**
   * Specifies how the answer option should be rendered.
   * @return answerType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies how the answer option should be rendered.")

  public AnswerTypeEnum getAnswerType() {
    return answerType;
  }


  public void setAnswerType(AnswerTypeEnum answerType) {
    this.answerType = answerType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeedbackFormElement feedbackFormElement = (FeedbackFormElement) o;
    return Objects.equals(this.id, feedbackFormElement.id) &&
        Objects.equals(this.parentId, feedbackFormElement.parentId) &&
        Objects.equals(this.question, feedbackFormElement.question) &&
        Objects.equals(this.answer, feedbackFormElement.answer) &&
        Objects.equals(this.answerType, feedbackFormElement.answerType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, parentId, question, answer, answerType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeedbackFormElement {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    question: ").append(toIndentedString(question)).append("\n");
    sb.append("    answer: ").append(toIndentedString(answer)).append("\n");
    sb.append("    answerType: ").append(toIndentedString(answerType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("parent_id");
    openapiFields.add("question");
    openapiFields.add("answer");
    openapiFields.add("answer_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FeedbackFormElement
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (FeedbackFormElement.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeedbackFormElement is not found in the empty JSON string", FeedbackFormElement.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FeedbackFormElement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FeedbackFormElement` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("question") != null && !jsonObj.get("question").isJsonNull()) && !jsonObj.get("question").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `question` to be a primitive type in the JSON string but got `%s`", jsonObj.get("question").toString()));
      }
      if ((jsonObj.get("answer") != null && !jsonObj.get("answer").isJsonNull()) && !jsonObj.get("answer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `answer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("answer").toString()));
      }
      if ((jsonObj.get("answer_type") != null && !jsonObj.get("answer_type").isJsonNull()) && !jsonObj.get("answer_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `answer_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("answer_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeedbackFormElement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeedbackFormElement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeedbackFormElement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeedbackFormElement.class));

       return (TypeAdapter<T>) new TypeAdapter<FeedbackFormElement>() {
           @Override
           public void write(JsonWriter out, FeedbackFormElement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FeedbackFormElement read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FeedbackFormElement given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FeedbackFormElement
  * @throws IOException if the JSON string is invalid with respect to FeedbackFormElement
  */
  public static FeedbackFormElement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeedbackFormElement.class);
  }

 /**
  * Convert an instance of FeedbackFormElement to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

