/*
 * ONDC Protocol Core API
 * ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import org.openapitools.client.model.FeedbackUrlParams;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes how a feedback URL will be sent by the Seller App
 */
@ApiModel(description = "Describes how a feedback URL will be sent by the Seller App")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-21T15:31:26.696+05:30[Asia/Kolkata]")
public class FeedbackUrl {
  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  /**
   * Gets or Sets tlMethod
   */
  @JsonAdapter(TlMethodEnum.Adapter.class)
  public enum TlMethodEnum {
    GET("http/get"),
    
    POST("http/post");

    private String value;

    TlMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TlMethodEnum fromValue(String value) {
      for (TlMethodEnum b : TlMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TlMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TlMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TlMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TlMethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TL_METHOD = "tl_method";
  @SerializedName(SERIALIZED_NAME_TL_METHOD)
  private TlMethodEnum tlMethod;

  public static final String SERIALIZED_NAME_PARAMS = "params";
  @SerializedName(SERIALIZED_NAME_PARAMS)
  private FeedbackUrlParams params;

  public FeedbackUrl() {
  }

  public FeedbackUrl url(URI url) {
    
    this.url = url;
    return this;
  }

   /**
   * feedback URL sent by the Seller App
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "feedback URL sent by the Seller App")

  public URI getUrl() {
    return url;
  }


  public void setUrl(URI url) {
    this.url = url;
  }


  public FeedbackUrl tlMethod(TlMethodEnum tlMethod) {
    
    this.tlMethod = tlMethod;
    return this;
  }

   /**
   * Get tlMethod
   * @return tlMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TlMethodEnum getTlMethod() {
    return tlMethod;
  }


  public void setTlMethod(TlMethodEnum tlMethod) {
    this.tlMethod = tlMethod;
  }


  public FeedbackUrl params(FeedbackUrlParams params) {
    
    this.params = params;
    return this;
  }

   /**
   * Get params
   * @return params
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FeedbackUrlParams getParams() {
    return params;
  }


  public void setParams(FeedbackUrlParams params) {
    this.params = params;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeedbackUrl feedbackUrl = (FeedbackUrl) o;
    return Objects.equals(this.url, feedbackUrl.url) &&
        Objects.equals(this.tlMethod, feedbackUrl.tlMethod) &&
        Objects.equals(this.params, feedbackUrl.params);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, tlMethod, params);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeedbackUrl {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    tlMethod: ").append(toIndentedString(tlMethod)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("url");
    openapiFields.add("tl_method");
    openapiFields.add("params");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FeedbackUrl
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (FeedbackUrl.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeedbackUrl is not found in the empty JSON string", FeedbackUrl.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FeedbackUrl.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FeedbackUrl` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("tl_method") != null && !jsonObj.get("tl_method").isJsonNull()) && !jsonObj.get("tl_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tl_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tl_method").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeedbackUrl.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeedbackUrl' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeedbackUrl> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeedbackUrl.class));

       return (TypeAdapter<T>) new TypeAdapter<FeedbackUrl>() {
           @Override
           public void write(JsonWriter out, FeedbackUrl value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FeedbackUrl read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FeedbackUrl given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FeedbackUrl
  * @throws IOException if the JSON string is invalid with respect to FeedbackUrl
  */
  public static FeedbackUrl fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeedbackUrl.class);
  }

 /**
  * Convert an instance of FeedbackUrl to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

