/*
 * ONDC Protocol Core API
 * ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.FeedbackFormElement;
import org.openapitools.client.model.FeedbackId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the rating of a person or an object.
 */
@ApiModel(description = "Describes the rating of a person or an object.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-21T15:31:26.696+05:30[Asia/Kolkata]")
public class Rating {
  public static final String SERIALIZED_NAME_RATING_CATEGORY = "rating_category";
  @SerializedName(SERIALIZED_NAME_RATING_CATEGORY)
  private String ratingCategory;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private BigDecimal value;

  public static final String SERIALIZED_NAME_FEEDBACK_FORM = "feedback_form";
  @SerializedName(SERIALIZED_NAME_FEEDBACK_FORM)
  private List<FeedbackFormElement> feedbackForm = null;

  public static final String SERIALIZED_NAME_FEEDBACK_ID = "feedback_id";
  @SerializedName(SERIALIZED_NAME_FEEDBACK_ID)
  private FeedbackId feedbackId = null;

  public Rating() {
  }

  public Rating ratingCategory(String ratingCategory) {
    
    this.ratingCategory = ratingCategory;
    return this;
  }

   /**
   * Category of the object being rated
   * @return ratingCategory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Category of the object being rated")

  public String getRatingCategory() {
    return ratingCategory;
  }


  public void setRatingCategory(String ratingCategory) {
    this.ratingCategory = ratingCategory;
  }


  public Rating id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Id of the object being rated
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Id of the object being rated")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Rating value(BigDecimal value) {
    
    this.value = value;
    return this;
  }

   /**
   * Rating value given to the object
   * minimum: 0
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Rating value given to the object")

  public BigDecimal getValue() {
    return value;
  }


  public void setValue(BigDecimal value) {
    this.value = value;
  }


  public Rating feedbackForm(List<FeedbackFormElement> feedbackForm) {
    
    this.feedbackForm = feedbackForm;
    return this;
  }

  public Rating addFeedbackFormItem(FeedbackFormElement feedbackFormItem) {
    if (this.feedbackForm == null) {
      this.feedbackForm = new ArrayList<>();
    }
    this.feedbackForm.add(feedbackFormItem);
    return this;
  }

   /**
   * Describes a feedback form that a Seller App can send to get feedback from the Buyer App
   * @return feedbackForm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Describes a feedback form that a Seller App can send to get feedback from the Buyer App")

  public List<FeedbackFormElement> getFeedbackForm() {
    return feedbackForm;
  }


  public void setFeedbackForm(List<FeedbackFormElement> feedbackForm) {
    this.feedbackForm = feedbackForm;
  }


  public Rating feedbackId(FeedbackId feedbackId) {
    
    this.feedbackId = feedbackId;
    return this;
  }

   /**
   * Get feedbackId
   * @return feedbackId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FeedbackId getFeedbackId() {
    return feedbackId;
  }


  public void setFeedbackId(FeedbackId feedbackId) {
    this.feedbackId = feedbackId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Rating rating = (Rating) o;
    return Objects.equals(this.ratingCategory, rating.ratingCategory) &&
        Objects.equals(this.id, rating.id) &&
        Objects.equals(this.value, rating.value) &&
        Objects.equals(this.feedbackForm, rating.feedbackForm) &&
        Objects.equals(this.feedbackId, rating.feedbackId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ratingCategory, id, value, feedbackForm, feedbackId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Rating {\n");
    sb.append("    ratingCategory: ").append(toIndentedString(ratingCategory)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    feedbackForm: ").append(toIndentedString(feedbackForm)).append("\n");
    sb.append("    feedbackId: ").append(toIndentedString(feedbackId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("rating_category");
    openapiFields.add("id");
    openapiFields.add("value");
    openapiFields.add("feedback_form");
    openapiFields.add("feedback_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Rating
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Rating.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Rating is not found in the empty JSON string", Rating.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Rating.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Rating` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("rating_category") != null && !jsonObj.get("rating_category").isJsonNull()) && !jsonObj.get("rating_category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rating_category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rating_category").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      JsonArray jsonArrayfeedbackForm = jsonObj.getAsJsonArray("feedback_form");
      if (jsonArrayfeedbackForm != null) {
        // ensure the json data is an array
        if (!jsonObj.get("feedback_form").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `feedback_form` to be an array in the JSON string but got `%s`", jsonObj.get("feedback_form").toString()));
        }

        // validate the optional field `feedback_form` (array)
        for (int i = 0; i < jsonArrayfeedbackForm.size(); i++) {
          FeedbackFormElement.validateJsonObject(jsonArrayfeedbackForm.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Rating.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Rating' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Rating> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Rating.class));

       return (TypeAdapter<T>) new TypeAdapter<Rating>() {
           @Override
           public void write(JsonWriter out, Rating value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Rating read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Rating given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Rating
  * @throws IOException if the JSON string is invalid with respect to Rating
  */
  public static Rating fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Rating.class);
  }

 /**
  * Convert an instance of Rating to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

