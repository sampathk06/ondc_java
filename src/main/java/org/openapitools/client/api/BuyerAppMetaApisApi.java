/*
 * ONDC Protocol Core API
 * ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CancellationReasonsPostRequest;
import org.openapitools.client.model.FeedbackCategoriesPostRequest;
import org.openapitools.client.model.FeedbackFormPostRequest;
import org.openapitools.client.model.RatingCategoriesPostRequest;
import org.openapitools.client.model.ReturnReasonsPostRequest;
import org.openapitools.client.model.SearchPost200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BuyerAppMetaApisApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BuyerAppMetaApisApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BuyerAppMetaApisApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancellationReasonsPost
     * @param cancellationReasonsPostRequest List of cancellation reasons (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancellationReasonsPostCall(CancellationReasonsPostRequest cancellationReasonsPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancellationReasonsPostRequest;

        // create path and map variables
        String localVarPath = "/cancellation_reasons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "GatewaySubscriberAuth", "GatewaySubscriberAuthNew", "SubscriberAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancellationReasonsPostValidateBeforeCall(CancellationReasonsPostRequest cancellationReasonsPostRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = cancellationReasonsPostCall(cancellationReasonsPostRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get cancellation reasons from the Seller App
     * @param cancellationReasonsPostRequest List of cancellation reasons (optional)
     * @return SearchPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public SearchPost200Response cancellationReasonsPost(CancellationReasonsPostRequest cancellationReasonsPostRequest) throws ApiException {
        ApiResponse<SearchPost200Response> localVarResp = cancellationReasonsPostWithHttpInfo(cancellationReasonsPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Get cancellation reasons from the Seller App
     * @param cancellationReasonsPostRequest List of cancellation reasons (optional)
     * @return ApiResponse&lt;SearchPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchPost200Response> cancellationReasonsPostWithHttpInfo(CancellationReasonsPostRequest cancellationReasonsPostRequest) throws ApiException {
        okhttp3.Call localVarCall = cancellationReasonsPostValidateBeforeCall(cancellationReasonsPostRequest, null);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get cancellation reasons from the Seller App
     * @param cancellationReasonsPostRequest List of cancellation reasons (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancellationReasonsPostAsync(CancellationReasonsPostRequest cancellationReasonsPostRequest, final ApiCallback<SearchPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancellationReasonsPostValidateBeforeCall(cancellationReasonsPostRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for feedbackCategoriesPost
     * @param feedbackCategoriesPostRequest Array of categories for which feedback can be given by the Buyer App (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call feedbackCategoriesPostCall(FeedbackCategoriesPostRequest feedbackCategoriesPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = feedbackCategoriesPostRequest;

        // create path and map variables
        String localVarPath = "/feedback_categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "GatewaySubscriberAuth", "GatewaySubscriberAuthNew", "SubscriberAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call feedbackCategoriesPostValidateBeforeCall(FeedbackCategoriesPostRequest feedbackCategoriesPostRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = feedbackCategoriesPostCall(feedbackCategoriesPostRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a list of categories for which feedback can be given by the Buyer App
     * @param feedbackCategoriesPostRequest Array of categories for which feedback can be given by the Buyer App (optional)
     * @return SearchPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public SearchPost200Response feedbackCategoriesPost(FeedbackCategoriesPostRequest feedbackCategoriesPostRequest) throws ApiException {
        ApiResponse<SearchPost200Response> localVarResp = feedbackCategoriesPostWithHttpInfo(feedbackCategoriesPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of categories for which feedback can be given by the Buyer App
     * @param feedbackCategoriesPostRequest Array of categories for which feedback can be given by the Buyer App (optional)
     * @return ApiResponse&lt;SearchPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchPost200Response> feedbackCategoriesPostWithHttpInfo(FeedbackCategoriesPostRequest feedbackCategoriesPostRequest) throws ApiException {
        okhttp3.Call localVarCall = feedbackCategoriesPostValidateBeforeCall(feedbackCategoriesPostRequest, null);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of categories for which feedback can be given by the Buyer App
     * @param feedbackCategoriesPostRequest Array of categories for which feedback can be given by the Buyer App (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call feedbackCategoriesPostAsync(FeedbackCategoriesPostRequest feedbackCategoriesPostRequest, final ApiCallback<SearchPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = feedbackCategoriesPostValidateBeforeCall(feedbackCategoriesPostRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for feedbackFormPost
     * @param feedbackFormPostRequest Feedback form sent by the Buyer App (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call feedbackFormPostCall(FeedbackFormPostRequest feedbackFormPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = feedbackFormPostRequest;

        // create path and map variables
        String localVarPath = "/feedback_form";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "GatewaySubscriberAuth", "GatewaySubscriberAuthNew", "SubscriberAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call feedbackFormPostValidateBeforeCall(FeedbackFormPostRequest feedbackFormPostRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = feedbackFormPostCall(feedbackFormPostRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a feedback form from the Seller App
     * @param feedbackFormPostRequest Feedback form sent by the Buyer App (optional)
     * @return SearchPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public SearchPost200Response feedbackFormPost(FeedbackFormPostRequest feedbackFormPostRequest) throws ApiException {
        ApiResponse<SearchPost200Response> localVarResp = feedbackFormPostWithHttpInfo(feedbackFormPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a feedback form from the Seller App
     * @param feedbackFormPostRequest Feedback form sent by the Buyer App (optional)
     * @return ApiResponse&lt;SearchPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchPost200Response> feedbackFormPostWithHttpInfo(FeedbackFormPostRequest feedbackFormPostRequest) throws ApiException {
        okhttp3.Call localVarCall = feedbackFormPostValidateBeforeCall(feedbackFormPostRequest, null);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a feedback form from the Seller App
     * @param feedbackFormPostRequest Feedback form sent by the Buyer App (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call feedbackFormPostAsync(FeedbackFormPostRequest feedbackFormPostRequest, final ApiCallback<SearchPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = feedbackFormPostValidateBeforeCall(feedbackFormPostRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratingCategoriesPost
     * @param ratingCategoriesPostRequest Array of categories which can be rated (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingCategoriesPostCall(RatingCategoriesPostRequest ratingCategoriesPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ratingCategoriesPostRequest;

        // create path and map variables
        String localVarPath = "/rating_categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "GatewaySubscriberAuth", "GatewaySubscriberAuthNew", "SubscriberAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratingCategoriesPostValidateBeforeCall(RatingCategoriesPostRequest ratingCategoriesPostRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = ratingCategoriesPostCall(ratingCategoriesPostRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a list of categories that can be rated by the Buyer App
     * @param ratingCategoriesPostRequest Array of categories which can be rated (optional)
     * @return SearchPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public SearchPost200Response ratingCategoriesPost(RatingCategoriesPostRequest ratingCategoriesPostRequest) throws ApiException {
        ApiResponse<SearchPost200Response> localVarResp = ratingCategoriesPostWithHttpInfo(ratingCategoriesPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of categories that can be rated by the Buyer App
     * @param ratingCategoriesPostRequest Array of categories which can be rated (optional)
     * @return ApiResponse&lt;SearchPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchPost200Response> ratingCategoriesPostWithHttpInfo(RatingCategoriesPostRequest ratingCategoriesPostRequest) throws ApiException {
        okhttp3.Call localVarCall = ratingCategoriesPostValidateBeforeCall(ratingCategoriesPostRequest, null);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of categories that can be rated by the Buyer App
     * @param ratingCategoriesPostRequest Array of categories which can be rated (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingCategoriesPostAsync(RatingCategoriesPostRequest ratingCategoriesPostRequest, final ApiCallback<SearchPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratingCategoriesPostValidateBeforeCall(ratingCategoriesPostRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for returnReasonsPost
     * @param returnReasonsPostRequest List of return reasons (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call returnReasonsPostCall(ReturnReasonsPostRequest returnReasonsPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = returnReasonsPostRequest;

        // create path and map variables
        String localVarPath = "/return_reasons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "GatewaySubscriberAuth", "GatewaySubscriberAuthNew", "SubscriberAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call returnReasonsPostValidateBeforeCall(ReturnReasonsPostRequest returnReasonsPostRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = returnReasonsPostCall(returnReasonsPostRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get return reasons from the Seller App
     * @param returnReasonsPostRequest List of return reasons (optional)
     * @return SearchPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public SearchPost200Response returnReasonsPost(ReturnReasonsPostRequest returnReasonsPostRequest) throws ApiException {
        ApiResponse<SearchPost200Response> localVarResp = returnReasonsPostWithHttpInfo(returnReasonsPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Get return reasons from the Seller App
     * @param returnReasonsPostRequest List of return reasons (optional)
     * @return ApiResponse&lt;SearchPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchPost200Response> returnReasonsPostWithHttpInfo(ReturnReasonsPostRequest returnReasonsPostRequest) throws ApiException {
        okhttp3.Call localVarCall = returnReasonsPostValidateBeforeCall(returnReasonsPostRequest, null);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get return reasons from the Seller App
     * @param returnReasonsPostRequest List of return reasons (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call returnReasonsPostAsync(ReturnReasonsPostRequest returnReasonsPostRequest, final ApiCallback<SearchPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = returnReasonsPostValidateBeforeCall(returnReasonsPostRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
