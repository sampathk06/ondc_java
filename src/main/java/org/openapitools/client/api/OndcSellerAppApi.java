/*
 * ONDC Protocol Core API
 * ONDC Protocol Core API specification. This is an adaptation of Beckn Core version 0.9.3
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CancelPostRequest;
import org.openapitools.client.model.RatingPostRequest;
import org.openapitools.client.model.SearchPost200Response;
import org.openapitools.client.model.SearchPostRequest;
import org.openapitools.client.model.SelectPostRequest;
import org.openapitools.client.model.StatusPostRequest;
import org.openapitools.client.model.SupportPostRequest;
import org.openapitools.client.model.TrackPostRequest;
import org.openapitools.client.model.UpdatePostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OndcSellerAppApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OndcSellerAppApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OndcSellerAppApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelPost
     * @param cancelPostRequest Buyer cancels an order (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelPostCall(CancelPostRequest cancelPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelPostRequest;

        // create path and map variables
        String localVarPath = "/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "GatewaySubscriberAuth", "GatewaySubscriberAuthNew", "SubscriberAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelPostValidateBeforeCall(CancelPostRequest cancelPostRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = cancelPostCall(cancelPostRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Cancel an order
     * @param cancelPostRequest Buyer cancels an order (optional)
     * @return SearchPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public SearchPost200Response cancelPost(CancelPostRequest cancelPostRequest) throws ApiException {
        ApiResponse<SearchPost200Response> localVarResp = cancelPostWithHttpInfo(cancelPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Cancel an order
     * @param cancelPostRequest Buyer cancels an order (optional)
     * @return ApiResponse&lt;SearchPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchPost200Response> cancelPostWithHttpInfo(CancelPostRequest cancelPostRequest) throws ApiException {
        okhttp3.Call localVarCall = cancelPostValidateBeforeCall(cancelPostRequest, null);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cancel an order
     * @param cancelPostRequest Buyer cancels an order (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelPostAsync(CancelPostRequest cancelPostRequest, final ApiCallback<SearchPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelPostValidateBeforeCall(cancelPostRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for confirmPost
     * @param selectPostRequest Buyer confirms an order (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmPostCall(SelectPostRequest selectPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = selectPostRequest;

        // create path and map variables
        String localVarPath = "/confirm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "GatewaySubscriberAuth", "GatewaySubscriberAuthNew", "SubscriberAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmPostValidateBeforeCall(SelectPostRequest selectPostRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = confirmPostCall(selectPostRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Initialize an order by providing billing and/or shipping details
     * @param selectPostRequest Buyer confirms an order (optional)
     * @return SearchPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public SearchPost200Response confirmPost(SelectPostRequest selectPostRequest) throws ApiException {
        ApiResponse<SearchPost200Response> localVarResp = confirmPostWithHttpInfo(selectPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Initialize an order by providing billing and/or shipping details
     * @param selectPostRequest Buyer confirms an order (optional)
     * @return ApiResponse&lt;SearchPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchPost200Response> confirmPostWithHttpInfo(SelectPostRequest selectPostRequest) throws ApiException {
        okhttp3.Call localVarCall = confirmPostValidateBeforeCall(selectPostRequest, null);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Initialize an order by providing billing and/or shipping details
     * @param selectPostRequest Buyer confirms an order (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmPostAsync(SelectPostRequest selectPostRequest, final ApiCallback<SearchPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmPostValidateBeforeCall(selectPostRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for initPost
     * @param selectPostRequest Buyer initializes order checkout (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initPostCall(SelectPostRequest selectPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = selectPostRequest;

        // create path and map variables
        String localVarPath = "/init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "GatewaySubscriberAuth", "GatewaySubscriberAuthNew", "SubscriberAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initPostValidateBeforeCall(SelectPostRequest selectPostRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = initPostCall(selectPostRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Initialize an order by providing billing and/or shipping details
     * @param selectPostRequest Buyer initializes order checkout (optional)
     * @return SearchPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public SearchPost200Response initPost(SelectPostRequest selectPostRequest) throws ApiException {
        ApiResponse<SearchPost200Response> localVarResp = initPostWithHttpInfo(selectPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Initialize an order by providing billing and/or shipping details
     * @param selectPostRequest Buyer initializes order checkout (optional)
     * @return ApiResponse&lt;SearchPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchPost200Response> initPostWithHttpInfo(SelectPostRequest selectPostRequest) throws ApiException {
        okhttp3.Call localVarCall = initPostValidateBeforeCall(selectPostRequest, null);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Initialize an order by providing billing and/or shipping details
     * @param selectPostRequest Buyer initializes order checkout (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initPostAsync(SelectPostRequest selectPostRequest, final ApiCallback<SearchPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = initPostValidateBeforeCall(selectPostRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratingPost
     * @param ratingPostRequest Buyer rates for one or more rating categories (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingPostCall(RatingPostRequest ratingPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ratingPostRequest;

        // create path and map variables
        String localVarPath = "/rating";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "GatewaySubscriberAuth", "GatewaySubscriberAuthNew", "SubscriberAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratingPostValidateBeforeCall(RatingPostRequest ratingPostRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = ratingPostCall(ratingPostRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Provide feedback on a service
     * @param ratingPostRequest Buyer rates for one or more rating categories (optional)
     * @return SearchPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public SearchPost200Response ratingPost(RatingPostRequest ratingPostRequest) throws ApiException {
        ApiResponse<SearchPost200Response> localVarResp = ratingPostWithHttpInfo(ratingPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Provide feedback on a service
     * @param ratingPostRequest Buyer rates for one or more rating categories (optional)
     * @return ApiResponse&lt;SearchPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchPost200Response> ratingPostWithHttpInfo(RatingPostRequest ratingPostRequest) throws ApiException {
        okhttp3.Call localVarCall = ratingPostValidateBeforeCall(ratingPostRequest, null);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Provide feedback on a service
     * @param ratingPostRequest Buyer rates for one or more rating categories (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingPostAsync(RatingPostRequest ratingPostRequest, final ApiCallback<SearchPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratingPostValidateBeforeCall(ratingPostRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchPost
     * @param searchPostRequest Buyer searches for products and services (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchPostCall(SearchPostRequest searchPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchPostRequest;

        // create path and map variables
        String localVarPath = "/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "GatewaySubscriberAuth", "GatewaySubscriberAuthNew", "SubscriberAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchPostValidateBeforeCall(SearchPostRequest searchPostRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = searchPostCall(searchPostRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Search for services by intent
     * @param searchPostRequest Buyer searches for products and services (optional)
     * @return SearchPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public SearchPost200Response searchPost(SearchPostRequest searchPostRequest) throws ApiException {
        ApiResponse<SearchPost200Response> localVarResp = searchPostWithHttpInfo(searchPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Search for services by intent
     * @param searchPostRequest Buyer searches for products and services (optional)
     * @return ApiResponse&lt;SearchPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchPost200Response> searchPostWithHttpInfo(SearchPostRequest searchPostRequest) throws ApiException {
        okhttp3.Call localVarCall = searchPostValidateBeforeCall(searchPostRequest, null);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search for services by intent
     * @param searchPostRequest Buyer searches for products and services (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchPostAsync(SearchPostRequest searchPostRequest, final ApiCallback<SearchPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchPostValidateBeforeCall(searchPostRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for selectPost
     * @param selectPostRequest Buyer selects one or more catalog items (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selectPostCall(SelectPostRequest selectPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = selectPostRequest;

        // create path and map variables
        String localVarPath = "/select";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "GatewaySubscriberAuth", "GatewaySubscriberAuthNew", "SubscriberAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selectPostValidateBeforeCall(SelectPostRequest selectPostRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = selectPostCall(selectPostRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Select items from the catalog and build your order
     * @param selectPostRequest Buyer selects one or more catalog items (optional)
     * @return SearchPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public SearchPost200Response selectPost(SelectPostRequest selectPostRequest) throws ApiException {
        ApiResponse<SearchPost200Response> localVarResp = selectPostWithHttpInfo(selectPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Select items from the catalog and build your order
     * @param selectPostRequest Buyer selects one or more catalog items (optional)
     * @return ApiResponse&lt;SearchPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchPost200Response> selectPostWithHttpInfo(SelectPostRequest selectPostRequest) throws ApiException {
        okhttp3.Call localVarCall = selectPostValidateBeforeCall(selectPostRequest, null);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Select items from the catalog and build your order
     * @param selectPostRequest Buyer selects one or more catalog items (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selectPostAsync(SelectPostRequest selectPostRequest, final ApiCallback<SearchPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = selectPostValidateBeforeCall(selectPostRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for statusPost
     * @param statusPostRequest Buyer checks for status of order (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusPostCall(StatusPostRequest statusPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = statusPostRequest;

        // create path and map variables
        String localVarPath = "/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "GatewaySubscriberAuth", "GatewaySubscriberAuthNew", "SubscriberAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statusPostValidateBeforeCall(StatusPostRequest statusPostRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = statusPostCall(statusPostRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Fetch the latest order object
     * @param statusPostRequest Buyer checks for status of order (optional)
     * @return SearchPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public SearchPost200Response statusPost(StatusPostRequest statusPostRequest) throws ApiException {
        ApiResponse<SearchPost200Response> localVarResp = statusPostWithHttpInfo(statusPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch the latest order object
     * @param statusPostRequest Buyer checks for status of order (optional)
     * @return ApiResponse&lt;SearchPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchPost200Response> statusPostWithHttpInfo(StatusPostRequest statusPostRequest) throws ApiException {
        okhttp3.Call localVarCall = statusPostValidateBeforeCall(statusPostRequest, null);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch the latest order object
     * @param statusPostRequest Buyer checks for status of order (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusPostAsync(StatusPostRequest statusPostRequest, final ApiCallback<SearchPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = statusPostValidateBeforeCall(statusPostRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for supportPost
     * @param supportPostRequest Buyer searches for Support Contact details (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supportPostCall(SupportPostRequest supportPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = supportPostRequest;

        // create path and map variables
        String localVarPath = "/support";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "GatewaySubscriberAuth", "GatewaySubscriberAuthNew", "SubscriberAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call supportPostValidateBeforeCall(SupportPostRequest supportPostRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = supportPostCall(supportPostRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Contact support
     * @param supportPostRequest Buyer searches for Support Contact details (optional)
     * @return SearchPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public SearchPost200Response supportPost(SupportPostRequest supportPostRequest) throws ApiException {
        ApiResponse<SearchPost200Response> localVarResp = supportPostWithHttpInfo(supportPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Contact support
     * @param supportPostRequest Buyer searches for Support Contact details (optional)
     * @return ApiResponse&lt;SearchPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchPost200Response> supportPostWithHttpInfo(SupportPostRequest supportPostRequest) throws ApiException {
        okhttp3.Call localVarCall = supportPostValidateBeforeCall(supportPostRequest, null);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Contact support
     * @param supportPostRequest Buyer searches for Support Contact details (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supportPostAsync(SupportPostRequest supportPostRequest, final ApiCallback<SearchPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = supportPostValidateBeforeCall(supportPostRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trackPost
     * @param trackPostRequest Buyer tracks fulfillment of an order (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trackPostCall(TrackPostRequest trackPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trackPostRequest;

        // create path and map variables
        String localVarPath = "/track";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "GatewaySubscriberAuth", "GatewaySubscriberAuthNew", "SubscriberAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trackPostValidateBeforeCall(TrackPostRequest trackPostRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = trackPostCall(trackPostRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Track an active order
     * @param trackPostRequest Buyer tracks fulfillment of an order (optional)
     * @return SearchPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public SearchPost200Response trackPost(TrackPostRequest trackPostRequest) throws ApiException {
        ApiResponse<SearchPost200Response> localVarResp = trackPostWithHttpInfo(trackPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Track an active order
     * @param trackPostRequest Buyer tracks fulfillment of an order (optional)
     * @return ApiResponse&lt;SearchPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchPost200Response> trackPostWithHttpInfo(TrackPostRequest trackPostRequest) throws ApiException {
        okhttp3.Call localVarCall = trackPostValidateBeforeCall(trackPostRequest, null);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Track an active order
     * @param trackPostRequest Buyer tracks fulfillment of an order (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trackPostAsync(TrackPostRequest trackPostRequest, final ApiCallback<SearchPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = trackPostValidateBeforeCall(trackPostRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePost
     * @param updatePostRequest Buyer updates an order (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePostCall(UpdatePostRequest updatePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePostRequest;

        // create path and map variables
        String localVarPath = "/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "GatewaySubscriberAuth", "GatewaySubscriberAuthNew", "SubscriberAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePostValidateBeforeCall(UpdatePostRequest updatePostRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = updatePostCall(updatePostRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update an order
     * @param updatePostRequest Buyer updates an order (optional)
     * @return SearchPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public SearchPost200Response updatePost(UpdatePostRequest updatePostRequest) throws ApiException {
        ApiResponse<SearchPost200Response> localVarResp = updatePostWithHttpInfo(updatePostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an order
     * @param updatePostRequest Buyer updates an order (optional)
     * @return ApiResponse&lt;SearchPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchPost200Response> updatePostWithHttpInfo(UpdatePostRequest updatePostRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePostValidateBeforeCall(updatePostRequest, null);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an order
     * @param updatePostRequest Buyer updates an order (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Acknowledgement of message received </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePostAsync(UpdatePostRequest updatePostRequest, final ApiCallback<SearchPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePostValidateBeforeCall(updatePostRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
